; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o..\output\usbh_msc_bot.o --asm_dir=..\Listing\ --list_dir=..\Listing\ --depend=..\output\usbh_msc_bot.d --cpu=Cortex-M4.fp --apcs=interwork -O1 --diag_suppress=9931,870 -I..\APP -I..\drive -I..\Include -I..\Libraries\CMSIS\inc -I..\Libraries\CMSIS\src -I..\Libraries\FWlib\inc -I..\Libraries\FWlib\src -I..\Listing -I..\Output -I..\Project -I..\STemWinLibrary522\Config -I..\STemWinLibrary522\emWinTask -I..\STemWinLibrary522\GUILib -I..\STemWinLibrary522\inc -I..\User -I..\USB\STM32_USB_HOST_Library\Class\HID\inc -I..\USB\STM32_USB_HOST_Library\Class\MSC\src -I..\USB\STM32_USB_HOST_Library\Core\src -I..\USB\USB_APP -I..\USB\STM32_USB_HOST_Library\Class\HID\src -I..\USB\STM32_USB_HOST_Library\Class\MSC\inc -I..\USB\STM32_USB_HOST_Library\Core\inc -I..\USB\STM32_USB_OTG_Driver\inc -I..\FATFS\exfuns -I..\FATFS\src\option -I..\FATFS\src -I..\MALLOC -I..\Libraries\STM32_USB_OTG_Driver\inc -I..\Libraries\STM32_USB_HOST_Library\Core\inc -I..\Libraries\STM32_USB_HOST_Library\Class\MSC\inc -I..\User\usbh_mass_storage -I..\User\fatfs\src -ID:\Keil_v5\ARM\RV31\INC -ID:\Keil_v5\ARM\CMSIS\Include -ID:\Keil_v5\ARM\INC\ST\STM32F4xx -D__UVISION_VERSION=525 -DUSE_STDPERIPH_DRIVER -DSTM32F40_41xxx -DUSE_USB_OTG_HS -DUSE_EMBEDDED_PHY -DSTM32F40XX --omf_browse=..\output\usbh_msc_bot.crf --no_multibyte_chars ..\Libraries\STM32_USB_HOST_Library\Class\MSC\src\usbh_msc_bot.c]
                          THUMB

                          AREA ||i.USBH_MSC_BOT_Abort||, CODE, READONLY, ALIGN=2

                  USBH_MSC_BOT_Abort PROC
;;;513    */
;;;514    USBH_Status USBH_MSC_BOT_Abort(USB_OTG_CORE_HANDLE *pdev, 
000000  b570              PUSH     {r4-r6,lr}
;;;515                                   USBH_HOST *phost,
;;;516                                   uint8_t direction)
;;;517    {
000002  4604              MOV      r4,r0
;;;518      USBH_Status status;
;;;519      
;;;520      status = USBH_BUSY;
000004  2001              MOVS     r0,#1
;;;521      
;;;522      switch (direction)
;;;523      {
;;;524      case USBH_MSC_DIR_IN :
;;;525        /* send ClrFeture on Bulk IN endpoint */
;;;526        status = USBH_ClrFeature(pdev,
000006  4d0c              LDR      r5,|L1.56|
000008  2a00              CMP      r2,#0                 ;522
00000a  d002              BEQ      |L1.18|
00000c  2a01              CMP      r2,#1                 ;522
00000e  d10b              BNE      |L1.40|
000010  e005              B        |L1.30|
                  |L1.18|
000012  782b              LDRB     r3,[r5,#0]  ; MSC_Machine
000014  78ea              LDRB     r2,[r5,#3]  ; MSC_Machine
000016  4620              MOV      r0,r4
000018  f7fffffe          BL       USBH_ClrFeature
;;;527                                 phost,
;;;528                                 MSC_Machine.MSBulkInEp,
;;;529                                 MSC_Machine.hc_num_in);
;;;530        
;;;531        break;
00001c  e004              B        |L1.40|
                  |L1.30|
;;;532        
;;;533      case USBH_MSC_DIR_OUT :
;;;534        /*send ClrFeature on Bulk OUT endpoint */
;;;535        status = USBH_ClrFeature(pdev, 
00001e  786b              LDRB     r3,[r5,#1]  ; MSC_Machine
000020  78aa              LDRB     r2,[r5,#2]  ; MSC_Machine
000022  4620              MOV      r0,r4
000024  f7fffffe          BL       USBH_ClrFeature
                  |L1.40|
;;;536                                 phost,
;;;537                                 MSC_Machine.MSBulkOutEp,
;;;538                                 MSC_Machine.hc_num_out);
;;;539        break;
;;;540        
;;;541      default:
;;;542        break;
;;;543      }
;;;544      
;;;545      BOTStallErrorCount++; /* Check Continuous Number of times, STALL has Occurred */ 
000028  4a04              LDR      r2,|L1.60|
00002a  6911              LDR      r1,[r2,#0x10]  ; BOTStallErrorCount
00002c  1c49              ADDS     r1,r1,#1
00002e  6111              STR      r1,[r2,#0x10]  ; BOTStallErrorCount
;;;546      if (BOTStallErrorCount > MAX_BULK_STALL_COUNT_LIMIT )
000030  2904              CMP      r1,#4
000032  d900              BLS      |L1.54|
;;;547      {
;;;548        status = USBH_UNRECOVERED_ERROR;
000034  2004              MOVS     r0,#4
                  |L1.54|
;;;549      }
;;;550      
;;;551      return status;
;;;552    }
000036  bd70              POP      {r4-r6,pc}
;;;553    
                          ENDP

                  |L1.56|
                          DCD      MSC_Machine
                  |L1.60|
                          DCD      ||.data||

                          AREA ||i.USBH_MSC_DecodeCSW||, CODE, READONLY, ALIGN=2

                  USBH_MSC_DecodeCSW PROC
;;;568    
;;;569    uint8_t USBH_MSC_DecodeCSW(USB_OTG_CORE_HANDLE *pdev , USBH_HOST *phost)
000000  b570              PUSH     {r4-r6,lr}
;;;570    {
000002  4605              MOV      r5,r0
;;;571      uint8_t status;
;;;572      uint32_t dataXferCount = 0;
;;;573      status = USBH_MSC_FAIL;
000004  2401              MOVS     r4,#1
;;;574      
;;;575      if(HCD_IsDeviceConnected(pdev))
000006  4628              MOV      r0,r5
000008  f7fffffe          BL       HCD_IsDeviceConnected
00000c  b1f8              CBZ      r0,|L2.78|
;;;576      {
;;;577        /*Checking if the transfer length is different than 13*/
;;;578        dataXferCount = HCD_GetXferCnt(pdev, MSC_Machine.hc_num_in); 
00000e  4812              LDR      r0,|L2.88|
000010  7801              LDRB     r1,[r0,#0]  ; MSC_Machine
000012  4628              MOV      r0,r5
000014  f7fffffe          BL       HCD_GetXferCnt
;;;579        
;;;580        if(dataXferCount != USBH_MSC_CSW_LENGTH)
000018  280d              CMP      r0,#0xd
00001a  d001              BEQ      |L2.32|
;;;581        {
;;;582          /*(4) Hi > Dn (Host expects to receive data from the device,
;;;583          Device intends to transfer no data)
;;;584          (5) Hi > Di (Host expects to receive data from the device,
;;;585          Device intends to send data to the host)
;;;586          (9) Ho > Dn (Host expects to send data to the device,
;;;587          Device intends to transfer no data)
;;;588          (11) Ho > Do  (Host expects to send data to the device,
;;;589          Device intends to receive data from the host)*/
;;;590          
;;;591          
;;;592          status = USBH_MSC_PHASE_ERROR;
00001c  2402              MOVS     r4,#2
00001e  e016              B        |L2.78|
                  |L2.32|
;;;593        }
;;;594        else
;;;595        { /* CSW length is Correct */
;;;596          
;;;597          /* Check validity of the CSW Signature and CSWStatus */
;;;598          if(USBH_MSC_CSWData.field.CSWSignature == USBH_MSC_BOT_CSW_SIGNATURE)
000020  480e              LDR      r0,|L2.92|
000022  4a0f              LDR      r2,|L2.96|
000024  6801              LDR      r1,[r0,#0]  ; USBH_MSC_CSWData
000026  4291              CMP      r1,r2
000028  d110              BNE      |L2.76|
;;;599          {/* Check Condition 1. dCSWSignature is equal to 53425355h */
;;;600            
;;;601            if(USBH_MSC_CSWData.field.CSWTag == USBH_MSC_CBWData.field.CBWTag)
00002a  f1a00220          SUB      r2,r0,#0x20
00002e  6841              LDR      r1,[r0,#4]  ; USBH_MSC_CSWData
000030  6852              LDR      r2,[r2,#4]  ; USBH_MSC_CBWData
000032  4291              CMP      r1,r2
000034  d10b              BNE      |L2.78|
;;;602            {
;;;603              /* Check Condition 3. dCSWTag matches the dCBWTag from the 
;;;604              corresponding CBW */
;;;605              
;;;606              if(USBH_MSC_CSWData.field.CSWStatus == USBH_MSC_OK) 
000036  7b00              LDRB     r0,[r0,#0xc]  ; USBH_MSC_CSWData
000038  b120              CBZ      r0,|L2.68|
;;;607              {
;;;608                /* Refer to USB Mass-Storage Class : BOT (www.usb.org) 
;;;609                
;;;610                Hn Host expects no data transfers
;;;611                Hi Host expects to receive data from the device
;;;612                Ho Host expects to send data to the device
;;;613                
;;;614                Dn Device intends to transfer no data
;;;615                Di Device intends to send data to the host
;;;616                Do Device intends to receive data from the host
;;;617                
;;;618                Section 6.7 
;;;619                (1) Hn = Dn (Host expects no data transfers,
;;;620                Device intends to transfer no data)
;;;621                (6) Hi = Di (Host expects to receive data from the device,
;;;622                Device intends to send data to the host)
;;;623                (12) Ho = Do (Host expects to send data to the device, 
;;;624                Device intends to receive data from the host)
;;;625                
;;;626                */
;;;627                
;;;628                status = USBH_MSC_OK;
;;;629              }
;;;630              else if(USBH_MSC_CSWData.field.CSWStatus == USBH_MSC_FAIL)
00003a  2801              CMP      r0,#1
00003c  d007              BEQ      |L2.78|
;;;631              {
;;;632                status = USBH_MSC_FAIL;
;;;633              }
;;;634              
;;;635              else if(USBH_MSC_CSWData.field.CSWStatus == USBH_MSC_PHASE_ERROR)
00003e  2802              CMP      r0,#2
000040  d002              BEQ      |L2.72|
000042  e004              B        |L2.78|
                  |L2.68|
000044  2400              MOVS     r4,#0                 ;628
000046  e002              B        |L2.78|
                  |L2.72|
;;;636              { 
;;;637                /* Refer to USB Mass-Storage Class : BOT (www.usb.org) 
;;;638                Section 6.7 
;;;639                (2) Hn < Di ( Host expects no data transfers, 
;;;640                Device intends to send data to the host)
;;;641                (3) Hn < Do ( Host expects no data transfers, 
;;;642                Device intends to receive data from the host)
;;;643                (7) Hi < Di ( Host expects to receive data from the device, 
;;;644                Device intends to send data to the host)
;;;645                (8) Hi <> Do ( Host expects to receive data from the device, 
;;;646                Device intends to receive data from the host)
;;;647                (10) Ho <> Di (Host expects to send data to the device,
;;;648                Di Device intends to send data to the host)
;;;649                (13) Ho < Do (Host expects to send data to the device, 
;;;650                Device intends to receive data from the host)
;;;651                */
;;;652                
;;;653                status = USBH_MSC_PHASE_ERROR;
000048  2402              MOVS     r4,#2
00004a  e000              B        |L2.78|
                  |L2.76|
;;;654              }
;;;655            } /* CSW Tag Matching is Checked  */
;;;656          } /* CSW Signature Correct Checking */
;;;657          else
;;;658          {
;;;659            /* If the CSW Signature is not valid, We Sall return the Phase Error to
;;;660            Upper Layers for Reset Recovery */
;;;661            
;;;662            status = USBH_MSC_PHASE_ERROR;
00004c  2402              MOVS     r4,#2
                  |L2.78|
;;;663          }
;;;664        } /* CSW Length Check*/
;;;665      }
;;;666      
;;;667      USBH_MSC_BOTXferParam.BOTXferStatus  = status;
00004e  4803              LDR      r0,|L2.92|
000050  3010              ADDS     r0,r0,#0x10
000052  73c4              STRB     r4,[r0,#0xf]
;;;668      return status;
000054  4620              MOV      r0,r4
;;;669    }
000056  bd70              POP      {r4-r6,pc}
;;;670    
                          ENDP

                  |L2.88|
                          DCD      MSC_Machine
                  |L2.92|
                          DCD      ||.bss||+0x20
                  |L2.96|
                          DCD      0x53425355

                          AREA ||i.USBH_MSC_HandleBOTXfer||, CODE, READONLY, ALIGN=2

                  USBH_MSC_HandleBOTXfer PROC
;;;153    */
;;;154    void USBH_MSC_HandleBOTXfer (USB_OTG_CORE_HANDLE *pdev ,USBH_HOST *phost)
000000  e92d5ff3          PUSH     {r0,r1,r4-r12,lr}
;;;155    {
;;;156      uint8_t xferDirection, index;
;;;157      static uint32_t remainingDataLength;
;;;158      static uint8_t *datapointer , *datapointer_prev;
;;;159      static uint8_t error_direction;
;;;160      USBH_Status status;
;;;161      
;;;162      URB_STATE URB_Status = URB_IDLE;
;;;163      
;;;164      if(HCD_IsDeviceConnected(pdev))
000004  9800              LDR      r0,[sp,#0]
000006  f7fffffe          BL       HCD_IsDeviceConnected
00000a  2800              CMP      r0,#0
00000c  d021              BEQ      |L3.82|
;;;165      {  
;;;166        
;;;167        switch (USBH_MSC_BOTXferParam.BOTState)
00000e  4cad              LDR      r4,|L3.708|
000010  2702              MOVS     r7,#2
;;;168        {
;;;169        case USBH_MSC_SEND_CBW:
;;;170          /* send CBW */    
;;;171          USBH_BulkSendData (pdev,
000012  48ad              LDR      r0,|L3.712|
000014  7921              LDRB     r1,[r4,#4]            ;167  ; USBH_MSC_BOTXferParam
;;;172                             &USBH_MSC_CBWData.CBWArray[0], 
;;;173                             USBH_MSC_BOT_CBW_PACKET_LENGTH , 
;;;174                             MSC_Machine.hc_num_out);
;;;175          
;;;176          USBH_MSC_BOTXferParam.BOTStateBkp = USBH_MSC_SEND_CBW;
;;;177          USBH_MSC_BOTXferParam.BOTState = USBH_MSC_SENT_CBW;
;;;178          xfer_error_count= 0;
000016  4dad              LDR      r5,|L3.716|
000018  2600              MOVS     r6,#0
00001a  f04f0908          MOV      r9,#8                 ;167
00001e  f04f0b07          MOV      r11,#7                ;167
000022  f04f0805          MOV      r8,#5                 ;167
000026  f04f0a01          MOV      r10,#1                ;167
00002a  2909              CMP      r1,#9                 ;167
00002c  d211              BCS      |L3.82|
00002e  e8dff001          TBB      [pc,r1]               ;167
000032  1005              DCB      0x10,0x05
000034  12498cea          DCB      0x12,0x49,0x8c,0xea
000038  fdfcfb00          DCB      0xfd,0xfc,0xfb,0x00
00003c  49a1              LDR      r1,|L3.708|
00003e  7843              LDRB     r3,[r0,#1]            ;171  ; MSC_Machine
000040  221f              MOVS     r2,#0x1f              ;171
000042  3930              SUBS     r1,r1,#0x30           ;171
000044  9800              LDR      r0,[sp,#0]            ;171
000046  f7fffffe          BL       USBH_BulkSendData
00004a  f884a005          STRB     r10,[r4,#5]           ;176
00004e  7127              STRB     r7,[r4,#4]            ;177
000050  706e              STRB     r6,[r5,#1]
                  |L3.82|
;;;179          break;
;;;180          
;;;181        case USBH_MSC_SENT_CBW:
;;;182          URB_Status = HCD_GetURB_State(pdev , MSC_Machine.hc_num_out);
;;;183          
;;;184          if(URB_Status == URB_DONE)
;;;185          { 
;;;186            BOTStallErrorCount = 0;
;;;187            USBH_MSC_BOTXferParam.BOTStateBkp = USBH_MSC_SENT_CBW; 
;;;188            
;;;189            /* If the CBW Pkt is sent successful, then change the state */
;;;190            xferDirection = (USBH_MSC_CBWData.field.CBWFlags & USB_REQ_DIR_MASK);
;;;191            
;;;192            if ( USBH_MSC_CBWData.field.CBWTransferLength != 0 )
;;;193            {
;;;194              remainingDataLength = USBH_MSC_CBWData.field.CBWTransferLength ;
;;;195              datapointer = USBH_MSC_BOTXferParam.pRxTxBuff;
;;;196              datapointer_prev = datapointer;
;;;197              
;;;198              /* If there is Data Transfer Stage */
;;;199              if (xferDirection == USB_D2H)
;;;200              {
;;;201                /* Data Direction is IN */
;;;202                USBH_MSC_BOTXferParam.BOTState = USBH_MSC_BOT_DATAIN_STATE;
;;;203              }
;;;204              else
;;;205              {
;;;206                /* Data Direction is OUT */
;;;207                USBH_MSC_BOTXferParam.BOTState = USBH_MSC_BOT_DATAOUT_STATE;
;;;208              } 
;;;209            }
;;;210            
;;;211            else
;;;212            {/* If there is NO Data Transfer Stage */
;;;213              USBH_MSC_BOTXferParam.BOTState = USBH_MSC_RECEIVE_CSW_STATE;
;;;214            }
;;;215            
;;;216          }   
;;;217          else if(URB_Status == URB_NOTREADY)
;;;218          {
;;;219            USBH_MSC_BOTXferParam.BOTState  = USBH_MSC_BOTXferParam.BOTStateBkp;    
;;;220          }     
;;;221          else if(URB_Status == URB_STALL)
;;;222          {
;;;223            error_direction = USBH_MSC_DIR_OUT;
;;;224            USBH_MSC_BOTXferParam.BOTState  = USBH_MSC_BOT_ERROR_OUT;
;;;225          }
;;;226          else if(URB_Status == URB_ERROR)
;;;227          {
;;;228            xfer_error_count++;
;;;229           
;;;230            if (xfer_error_count < 3)
;;;231            {
;;;232              USBH_MSC_BOTXferParam.BOTState  = USBH_MSC_BOTXferParam.BOTStateBkp; 
;;;233            }
;;;234            else
;;;235            {
;;;236             /* unrecoverd error */
;;;237             USBH_MSC_BOTXferParam.BOTXferStatus = USBH_MSC_PHASE_ERROR;
;;;238            }
;;;239            
;;;240          }
;;;241          
;;;242          break;
;;;243          
;;;244        case USBH_MSC_BOT_DATAIN_STATE:
;;;245          
;;;246          URB_Status =   HCD_GetURB_State(pdev , MSC_Machine.hc_num_in);
;;;247          /* BOT DATA IN stage */
;;;248          if((URB_Status == URB_DONE) ||(USBH_MSC_BOTXferParam.BOTStateBkp != USBH_MSC_BOT_DATAIN_STATE))
;;;249          {
;;;250            BOTStallErrorCount = 0;
;;;251            USBH_MSC_BOTXferParam.BOTStateBkp = USBH_MSC_BOT_DATAIN_STATE;    
;;;252            
;;;253            if(remainingDataLength > MSC_Machine.MSBulkInEpSize)
;;;254            {
;;;255              USBH_BulkReceiveData (pdev,
;;;256    	                        datapointer, 
;;;257    			        MSC_Machine.MSBulkInEpSize , 
;;;258    			        MSC_Machine.hc_num_in);
;;;259              
;;;260              remainingDataLength -= MSC_Machine.MSBulkInEpSize;
;;;261              datapointer = datapointer + MSC_Machine.MSBulkInEpSize;
;;;262            }
;;;263            else if ( remainingDataLength == 0)
;;;264            {
;;;265              /* If value was 0, and successful transfer, then change the state */
;;;266              USBH_MSC_BOTXferParam.BOTState = USBH_MSC_RECEIVE_CSW_STATE;
;;;267            }
;;;268            else
;;;269            {       
;;;270              USBH_BulkReceiveData (pdev,
;;;271    	                        datapointer, 
;;;272    			        remainingDataLength , 
;;;273    			        MSC_Machine.hc_num_in);
;;;274              
;;;275              remainingDataLength = 0; /* Reset this value and keep in same state */
;;;276            }
;;;277          }
;;;278          else if(URB_Status == URB_STALL)
;;;279          {
;;;280            /* This is Data Stage STALL Condition */
;;;281            
;;;282            error_direction = USBH_MSC_DIR_IN;
;;;283            USBH_MSC_BOTXferParam.BOTState  = USBH_MSC_BOT_ERROR_IN;
;;;284            
;;;285            /* Refer to USB Mass-Storage Class : BOT (www.usb.org) 
;;;286            6.7.2 Host expects to receive data from the device
;;;287            3. On a STALL condition receiving data, then:
;;;288            The host shall accept the data received.
;;;289            The host shall clear the Bulk-In pipe.
;;;290            4. The host shall attempt to receive a CSW.
;;;291            
;;;292            USBH_MSC_BOTXferParam.BOTStateBkp is used to switch to the Original 
;;;293            state after the ClearFeature Command is issued.
;;;294            */
;;;295            USBH_MSC_BOTXferParam.BOTStateBkp = USBH_MSC_RECEIVE_CSW_STATE;
;;;296            
;;;297          }
;;;298          
;;;299          else if(URB_Status == URB_ERROR)
;;;300          {
;;;301            xfer_error_count++;
;;;302           
;;;303            if (xfer_error_count < 3)
;;;304            {
;;;305              USBH_MSC_BOTXferParam.BOTState  = USBH_MSC_BOTXferParam.BOTStateBkp; 
;;;306            }
;;;307            else
;;;308            {
;;;309             /* unrecoverd error */
;;;310             USBH_MSC_BOTXferParam.BOTXferStatus = USBH_MSC_PHASE_ERROR;
;;;311            }   
;;;312          }
;;;313          break;   
;;;314          
;;;315          
;;;316        case USBH_MSC_BOT_DATAOUT_STATE:
;;;317          /* BOT DATA OUT stage */
;;;318          URB_Status = HCD_GetURB_State(pdev , MSC_Machine.hc_num_out);       
;;;319          if(URB_Status == URB_DONE)
;;;320          {
;;;321            BOTStallErrorCount = 0;
;;;322            USBH_MSC_BOTXferParam.BOTStateBkp = USBH_MSC_BOT_DATAOUT_STATE;    
;;;323            if(remainingDataLength > MSC_Machine.MSBulkOutEpSize)
;;;324            {
;;;325              USBH_BulkSendData (pdev,
;;;326                                 datapointer, 
;;;327                                 MSC_Machine.MSBulkOutEpSize , 
;;;328                                 MSC_Machine.hc_num_out);
;;;329              datapointer_prev = datapointer;
;;;330              datapointer = datapointer + MSC_Machine.MSBulkOutEpSize;
;;;331              
;;;332              remainingDataLength = remainingDataLength - MSC_Machine.MSBulkOutEpSize;
;;;333              xfer_error_count=0;
;;;334            }
;;;335            else if ( remainingDataLength == 0)
;;;336            {
;;;337              /* If value was 0, and successful transfer, then change the state */
;;;338              USBH_MSC_BOTXferParam.BOTState = USBH_MSC_RECEIVE_CSW_STATE;
;;;339            }
;;;340            else
;;;341            {
;;;342              USBH_BulkSendData (pdev,
;;;343    	                     datapointer, 
;;;344    			     remainingDataLength , 
;;;345    			     MSC_Machine.hc_num_out);
;;;346              
;;;347              remainingDataLength = 0; /* Reset this value and keep in same state */   
;;;348            }      
;;;349          }
;;;350          
;;;351          else if(URB_Status == URB_NOTREADY)
;;;352          {
;;;353            if(datapointer != datapointer_prev)
;;;354            {
;;;355              USBH_BulkSendData (pdev,
;;;356                                 (datapointer - MSC_Machine.MSBulkOutEpSize), 
;;;357                                 MSC_Machine.MSBulkOutEpSize , 
;;;358                                 MSC_Machine.hc_num_out);
;;;359            }
;;;360            else
;;;361            {
;;;362              USBH_BulkSendData (pdev,
;;;363                                 datapointer,
;;;364                                 MSC_Machine.MSBulkOutEpSize , 
;;;365                                 MSC_Machine.hc_num_out);
;;;366            }
;;;367          }
;;;368          
;;;369          else if(URB_Status == URB_STALL)
;;;370          {
;;;371            error_direction = USBH_MSC_DIR_OUT;
;;;372            USBH_MSC_BOTXferParam.BOTState  = USBH_MSC_BOT_ERROR_OUT;
;;;373            
;;;374            /* Refer to USB Mass-Storage Class : BOT (www.usb.org) 
;;;375            6.7.3 Ho - Host expects to send data to the device
;;;376            3. On a STALL condition sending data, then:
;;;377            " The host shall clear the Bulk-Out pipe.
;;;378            4. The host shall attempt to receive a CSW.
;;;379            
;;;380            The Above statement will do the clear the Bulk-Out pipe.
;;;381            The Below statement will help in Getting the CSW.  
;;;382            
;;;383            USBH_MSC_BOTXferParam.BOTStateBkp is used to switch to the Original 
;;;384            state after the ClearFeature Command is issued.
;;;385            */
;;;386            
;;;387            USBH_MSC_BOTXferParam.BOTStateBkp = USBH_MSC_RECEIVE_CSW_STATE;
;;;388            
;;;389          }
;;;390          else if(URB_Status == URB_ERROR)
;;;391          {
;;;392            xfer_error_count++;
;;;393           
;;;394            if (xfer_error_count < 3)
;;;395            {
;;;396              USBH_MSC_BOTXferParam.BOTState  = USBH_MSC_BOTXferParam.BOTStateBkp; 
;;;397            }
;;;398            else
;;;399            {
;;;400             /* unrecoverd error */
;;;401             USBH_MSC_BOTXferParam.BOTXferStatus = USBH_MSC_PHASE_ERROR;
;;;402            }
;;;403          }
;;;404          break;
;;;405          
;;;406        case USBH_MSC_RECEIVE_CSW_STATE:
;;;407          /* BOT CSW stage */     
;;;408            /* NOTE: We cannot reset the BOTStallErrorCount here as it may come from 
;;;409            the clearFeature from previous command */
;;;410            
;;;411            USBH_MSC_BOTXferParam.BOTStateBkp = USBH_MSC_RECEIVE_CSW_STATE;
;;;412            
;;;413            USBH_MSC_BOTXferParam.pRxTxBuff = USBH_MSC_CSWData.CSWArray;
;;;414            USBH_MSC_BOTXferParam.DataLength = USBH_MSC_CSW_MAX_LENGTH;
;;;415            
;;;416            for(index = USBH_MSC_CSW_LENGTH-1; index != 0; index--)
;;;417            {
;;;418              USBH_MSC_CSWData.CSWArray[index] = 0;
;;;419            }
;;;420            
;;;421            USBH_MSC_CSWData.CSWArray[0] = 0;
;;;422            
;;;423            USBH_BulkReceiveData (pdev,
;;;424                                  USBH_MSC_BOTXferParam.pRxTxBuff, 
;;;425                                  USBH_MSC_CSW_MAX_LENGTH , 
;;;426                                  MSC_Machine.hc_num_in);
;;;427            USBH_MSC_BOTXferParam.BOTState = USBH_MSC_DECODE_CSW; 
;;;428            xfer_error_count=0;
;;;429    
;;;430          break;
;;;431          
;;;432        case USBH_MSC_DECODE_CSW:
;;;433          URB_Status = HCD_GetURB_State(pdev , MSC_Machine.hc_num_in);
;;;434          /* Decode CSW */
;;;435          if(URB_Status == URB_DONE)
;;;436          {
;;;437            BOTStallErrorCount = 0;
;;;438            USBH_MSC_BOTXferParam.BOTStateBkp = USBH_MSC_RECEIVE_CSW_STATE;
;;;439            
;;;440            USBH_MSC_BOTXferParam.MSCState = USBH_MSC_BOTXferParam.MSCStateCurrent ;
;;;441            
;;;442            USBH_MSC_BOTXferParam.BOTXferStatus = USBH_MSC_DecodeCSW(pdev , phost);
;;;443          }
;;;444          else if(URB_Status == URB_STALL)     
;;;445          {
;;;446            error_direction = USBH_MSC_DIR_IN;
;;;447            USBH_MSC_BOTXferParam.BOTState  = USBH_MSC_BOT_ERROR_IN;
;;;448          }
;;;449          
;;;450          else if(URB_Status == URB_ERROR)
;;;451          {
;;;452            xfer_error_count++;
;;;453           
;;;454            if (xfer_error_count < 3)
;;;455            {
;;;456              USBH_MSC_BOTXferParam.BOTState  = USBH_MSC_BOTXferParam.BOTStateBkp; 
;;;457            }
;;;458            else
;;;459            {
;;;460              /* unrecovered error */
;;;461             USBH_MSC_BOTXferParam.BOTXferStatus = USBH_MSC_PHASE_ERROR;
;;;462            }
;;;463          }
;;;464          break;
;;;465          
;;;466        case USBH_MSC_BOT_ERROR_IN: 
;;;467          status = USBH_MSC_BOT_Abort(pdev, phost, USBH_MSC_DIR_IN);
;;;468          if (status == USBH_OK)
;;;469          {
;;;470            /* Check if the error was due in Both the directions */
;;;471            if (error_direction == USBH_MSC_BOTH_DIR)
;;;472            {/* If Both directions are Needed, Switch to OUT Direction */
;;;473              USBH_MSC_BOTXferParam.BOTState = USBH_MSC_BOT_ERROR_OUT;
;;;474            }
;;;475            else
;;;476            {
;;;477              /* Switch Back to the Original State, In many cases this will be 
;;;478              USBH_MSC_RECEIVE_CSW_STATE state */
;;;479              USBH_MSC_BOTXferParam.BOTState = USBH_MSC_BOTXferParam.BOTStateBkp;
;;;480            }
;;;481          }
;;;482          else if (status == USBH_UNRECOVERED_ERROR)
;;;483          {
;;;484            /* This means that there is a STALL Error limit, Do Reset Recovery */
;;;485            USBH_MSC_BOTXferParam.BOTXferStatus = USBH_MSC_PHASE_ERROR;
;;;486          }
;;;487          break;
;;;488          
;;;489        case USBH_MSC_BOT_ERROR_OUT: 
;;;490          status = USBH_MSC_BOT_Abort(pdev,phost, USBH_MSC_DIR_OUT);
;;;491          if ( status == USBH_OK)
;;;492          { /* Switch Back to the Original State */
;;;493            USBH_MSC_BOTXferParam.BOTState = USBH_MSC_BOTXferParam.BOTStateBkp;        
;;;494          }
;;;495          else if (status == USBH_UNRECOVERED_ERROR)
;;;496          {
;;;497            /* This means that there is a STALL Error limit, Do Reset Recovery */
;;;498            USBH_MSC_BOTXferParam.BOTXferStatus = USBH_MSC_PHASE_ERROR;
;;;499          }
;;;500          break;
;;;501          
;;;502        default:      
;;;503          break;
;;;504        }
;;;505      }
;;;506    }
000052  e8bd9ffc          POP      {r2-r12,pc}
000056  7841              LDRB     r1,[r0,#1]            ;182  ; MSC_Machine
000058  9800              LDR      r0,[sp,#0]            ;182
00005a  f7fffffe          BL       HCD_GetURB_State
00005e  2801              CMP      r0,#1                 ;184
000060  d00e              BEQ      |L3.128|
000062  2802              CMP      r0,#2                 ;217
000064  d024              BEQ      |L3.176|
000066  2804              CMP      r0,#4                 ;221
000068  d025              BEQ      |L3.182|
00006a  2803              CMP      r0,#3                 ;226
00006c  d1f1              BNE      |L3.82|
00006e  7868              LDRB     r0,[r5,#1]            ;228  ; xfer_error_count
000070  1c40              ADDS     r0,r0,#1              ;228
000072  b2c0              UXTB     r0,r0                 ;228
000074  7068              STRB     r0,[r5,#1]            ;228
000076  2803              CMP      r0,#3                 ;230
000078  d222              BCS      |L3.192|
00007a  7960              LDRB     r0,[r4,#5]            ;232  ; USBH_MSC_BOTXferParam
00007c  7120              STRB     r0,[r4,#4]            ;232
                  |L3.126|
00007e  e7e8              B        |L3.82|
                  |L3.128|
000080  612e              STR      r6,[r5,#0x10]         ;186  ; BOTStallErrorCount
000082  7167              STRB     r7,[r4,#5]            ;187
000084  488f              LDR      r0,|L3.708|
000086  3830              SUBS     r0,r0,#0x30           ;190
000088  7b01              LDRB     r1,[r0,#0xc]          ;190  ; USBH_MSC_CBWData
00008a  f0010180          AND      r1,r1,#0x80           ;190
00008e  6880              LDR      r0,[r0,#8]            ;192  ; USBH_MSC_CBWData
000090  b158              CBZ      r0,|L3.170|
000092  6068              STR      r0,[r5,#4]            ;194  ; remainingDataLength
000094  68a0              LDR      r0,[r4,#8]            ;195  ; USBH_MSC_BOTXferParam
000096  60a8              STR      r0,[r5,#8]            ;195  ; datapointer
000098  60e8              STR      r0,[r5,#0xc]          ;196  ; datapointer_prev
00009a  2980              CMP      r1,#0x80              ;199
00009c  d002              BEQ      |L3.164|
00009e  2004              MOVS     r0,#4                 ;207
0000a0  7120              STRB     r0,[r4,#4]            ;207
0000a2  e7d6              B        |L3.82|
                  |L3.164|
0000a4  2003              MOVS     r0,#3                 ;202
0000a6  7120              STRB     r0,[r4,#4]            ;202
0000a8  e7d3              B        |L3.82|
                  |L3.170|
0000aa  f8848004          STRB     r8,[r4,#4]            ;213
0000ae  e7d0              B        |L3.82|
                  |L3.176|
0000b0  7960              LDRB     r0,[r4,#5]            ;219  ; USBH_MSC_BOTXferParam
0000b2  7120              STRB     r0,[r4,#4]            ;219
0000b4  e7cd              B        |L3.82|
                  |L3.182|
0000b6  f885a000          STRB     r10,[r5,#0]           ;223
0000ba  f8849004          STRB     r9,[r4,#4]            ;224
0000be  e7c8              B        |L3.82|
                  |L3.192|
0000c0  73e7              STRB     r7,[r4,#0xf]          ;237
0000c2  e7c6              B        |L3.82|
0000c4  4681              MOV      r9,r0                 ;246
0000c6  7801              LDRB     r1,[r0,#0]            ;246  ; MSC_Machine
0000c8  9800              LDR      r0,[sp,#0]            ;246
0000ca  f7fffffe          BL       HCD_GetURB_State
0000ce  4601              MOV      r1,r0                 ;246
0000d0  2901              CMP      r1,#1                 ;248
0000d2  d002              BEQ      |L3.218|
0000d4  7960              LDRB     r0,[r4,#5]            ;248  ; USBH_MSC_BOTXferParam
0000d6  2803              CMP      r0,#3                 ;248
0000d8  d023              BEQ      |L3.290|
                  |L3.218|
0000da  612e              STR      r6,[r5,#0x10]         ;250  ; BOTStallErrorCount
0000dc  2003              MOVS     r0,#3                 ;251
0000de  7160              STRB     r0,[r4,#5]            ;251
0000e0  f8b92004          LDRH     r2,[r9,#4]            ;253  ; MSC_Machine
0000e4  6868              LDR      r0,[r5,#4]            ;253  ; remainingDataLength
0000e6  4282              CMP      r2,r0                 ;253
0000e8  d20e              BCS      |L3.264|
0000ea  f8993000          LDRB     r3,[r9,#0]            ;255  ; MSC_Machine
0000ee  68a9              LDR      r1,[r5,#8]            ;255  ; datapointer
0000f0  9800              LDR      r0,[sp,#0]            ;255
0000f2  f7fffffe          BL       USBH_BulkReceiveData
0000f6  f8b90004          LDRH     r0,[r9,#4]            ;260  ; MSC_Machine
0000fa  6869              LDR      r1,[r5,#4]            ;260  ; remainingDataLength
0000fc  1a09              SUBS     r1,r1,r0              ;260
0000fe  6069              STR      r1,[r5,#4]            ;260  ; remainingDataLength
000100  68a9              LDR      r1,[r5,#8]            ;261  ; datapointer
000102  4408              ADD      r0,r0,r1              ;261
000104  60a8              STR      r0,[r5,#8]            ;261  ; datapointer
000106  e7a4              B        |L3.82|
                  |L3.264|
000108  b140              CBZ      r0,|L3.284|
00010a  b282              UXTH     r2,r0                 ;270
00010c  f8993000          LDRB     r3,[r9,#0]            ;270  ; MSC_Machine
000110  68a9              LDR      r1,[r5,#8]            ;270  ; datapointer
000112  9800              LDR      r0,[sp,#0]            ;270
000114  f7fffffe          BL       USBH_BulkReceiveData
000118  606e              STR      r6,[r5,#4]            ;275  ; remainingDataLength
00011a  e79a              B        |L3.82|
                  |L3.284|
00011c  f8848004          STRB     r8,[r4,#4]            ;266
000120  e797              B        |L3.82|
                  |L3.290|
000122  2904              CMP      r1,#4                 ;278
000124  d009              BEQ      |L3.314|
000126  2903              CMP      r1,#3                 ;299
000128  d193              BNE      |L3.82|
00012a  7869              LDRB     r1,[r5,#1]            ;301  ; xfer_error_count
00012c  1c49              ADDS     r1,r1,#1              ;301
00012e  b2c9              UXTB     r1,r1                 ;301
000130  7069              STRB     r1,[r5,#1]            ;301
000132  2903              CMP      r1,#3                 ;303
000134  d207              BCS      |L3.326|
000136  7120              STRB     r0,[r4,#4]            ;305
000138  e78b              B        |L3.82|
                  |L3.314|
00013a  702e              STRB     r6,[r5,#0]            ;282
00013c  f884b004          STRB     r11,[r4,#4]           ;283
000140  f8848005          STRB     r8,[r4,#5]            ;295
000144  e785              B        |L3.82|
                  |L3.326|
000146  73e7              STRB     r7,[r4,#0xf]          ;310
000148  e783              B        |L3.82|
00014a  4683              MOV      r11,r0                ;318
00014c  7841              LDRB     r1,[r0,#1]            ;318  ; MSC_Machine
00014e  9800              LDR      r0,[sp,#0]            ;318
000150  f7fffffe          BL       HCD_GetURB_State
000154  2801              CMP      r0,#1                 ;319
000156  d00e              BEQ      |L3.374|
000158  2802              CMP      r0,#2                 ;351
00015a  d032              BEQ      |L3.450|
00015c  2804              CMP      r0,#4                 ;369
00015e  d049              BEQ      |L3.500|
000160  2803              CMP      r0,#3                 ;390
000162  d18c              BNE      |L3.126|
000164  7868              LDRB     r0,[r5,#1]            ;392  ; xfer_error_count
000166  1c40              ADDS     r0,r0,#1              ;392
000168  b2c0              UXTB     r0,r0                 ;392
00016a  7068              STRB     r0,[r5,#1]            ;392
00016c  2803              CMP      r0,#3                 ;394
00016e  d248              BCS      |L3.514|
000170  7960              LDRB     r0,[r4,#5]            ;396  ; USBH_MSC_BOTXferParam
000172  7120              STRB     r0,[r4,#4]            ;396
                  |L3.372|
000174  e76d              B        |L3.82|
                  |L3.374|
000176  612e              STR      r6,[r5,#0x10]         ;321  ; BOTStallErrorCount
000178  2004              MOVS     r0,#4                 ;322
00017a  7160              STRB     r0,[r4,#5]            ;322
00017c  f8bb2006          LDRH     r2,[r11,#6]           ;323  ; MSC_Machine
000180  6868              LDR      r0,[r5,#4]            ;323  ; remainingDataLength
000182  4282              CMP      r2,r0                 ;323
000184  d210              BCS      |L3.424|
000186  f89b3001          LDRB     r3,[r11,#1]           ;325  ; MSC_Machine
00018a  68a9              LDR      r1,[r5,#8]            ;325  ; datapointer
00018c  9800              LDR      r0,[sp,#0]            ;325
00018e  f7fffffe          BL       USBH_BulkSendData
000192  68a8              LDR      r0,[r5,#8]            ;329  ; datapointer
000194  60e8              STR      r0,[r5,#0xc]          ;329  ; datapointer_prev
000196  f8bb1006          LDRH     r1,[r11,#6]           ;330  ; MSC_Machine
00019a  4408              ADD      r0,r0,r1              ;330
00019c  60a8              STR      r0,[r5,#8]            ;330  ; datapointer
00019e  6868              LDR      r0,[r5,#4]            ;332  ; remainingDataLength
0001a0  1a40              SUBS     r0,r0,r1              ;332
0001a2  6068              STR      r0,[r5,#4]            ;332  ; remainingDataLength
0001a4  706e              STRB     r6,[r5,#1]            ;333
                  |L3.422|
0001a6  e754              B        |L3.82|
                  |L3.424|
0001a8  b140              CBZ      r0,|L3.444|
0001aa  b282              UXTH     r2,r0                 ;342
0001ac  f89b3001          LDRB     r3,[r11,#1]           ;342  ; MSC_Machine
0001b0  68a9              LDR      r1,[r5,#8]            ;342  ; datapointer
0001b2  9800              LDR      r0,[sp,#0]            ;342
0001b4  f7fffffe          BL       USBH_BulkSendData
0001b8  606e              STR      r6,[r5,#4]            ;347  ; remainingDataLength
0001ba  e74a              B        |L3.82|
                  |L3.444|
0001bc  f8848004          STRB     r8,[r4,#4]            ;338
0001c0  e747              B        |L3.82|
                  |L3.450|
0001c2  e9d51002          LDRD     r1,r0,[r5,#8]         ;353
0001c6  4281              CMP      r1,r0                 ;353
0001c8  d00a              BEQ      |L3.480|
0001ca  f8bb2006          LDRH     r2,[r11,#6]           ;355  ; MSC_Machine
0001ce  f89b3001          LDRB     r3,[r11,#1]           ;355  ; MSC_Machine
0001d2  9800              LDR      r0,[sp,#0]            ;355
0001d4  b002              ADD      sp,sp,#8              ;355
0001d6  1a89              SUBS     r1,r1,r2              ;355
0001d8  e8bd5ff0          POP      {r4-r12,lr}           ;355
0001dc  f7ffbffe          B.W      USBH_BulkSendData
                  |L3.480|
0001e0  f89b3001          LDRB     r3,[r11,#1]           ;362  ; MSC_Machine
0001e4  f8bb2006          LDRH     r2,[r11,#6]           ;362  ; MSC_Machine
0001e8  9800              LDR      r0,[sp,#0]            ;362
0001ea  b002              ADD      sp,sp,#8              ;362
0001ec  e8bd5ff0          POP      {r4-r12,lr}           ;362
0001f0  f7ffbffe          B.W      USBH_BulkSendData
                  |L3.500|
0001f4  f885a000          STRB     r10,[r5,#0]           ;371
0001f8  f8849004          STRB     r9,[r4,#4]            ;372
0001fc  f8848005          STRB     r8,[r4,#5]            ;387
                  |L3.512|
000200  e727              B        |L3.82|
                  |L3.514|
000202  73e7              STRB     r7,[r4,#0xf]          ;401
000204  e725              B        |L3.82|
000206  f8848005          STRB     r8,[r4,#5]            ;411
00020a  492e              LDR      r1,|L3.708|
00020c  3910              SUBS     r1,r1,#0x10           ;413
00020e  60a1              STR      r1,[r4,#8]            ;413  ; USBH_MSC_BOTXferParam
000210  223f              MOVS     r2,#0x3f              ;414
000212  81a2              STRH     r2,[r4,#0xc]          ;414
000214  220c              MOVS     r2,#0xc               ;416
                  |L3.534|
000216  548e              STRB     r6,[r1,r2]            ;418
000218  1e52              SUBS     r2,r2,#1              ;416
00021a  b2d2              UXTB     r2,r2                 ;416
00021c  2a00              CMP      r2,#0                 ;416
00021e  d1fa              BNE      |L3.534|
000220  700e              STRB     r6,[r1,#0]            ;421
000222  7803              LDRB     r3,[r0,#0]            ;423  ; MSC_Machine
000224  223f              MOVS     r2,#0x3f              ;423
000226  e002              B        |L3.558|
000228  e03f              B        |L3.682|
00022a  e02b              B        |L3.644|
00022c  e006              B        |L3.572|
                  |L3.558|
00022e  9800              LDR      r0,[sp,#0]            ;423
000230  f7fffffe          BL       USBH_BulkReceiveData
000234  2006              MOVS     r0,#6                 ;427
000236  7120              STRB     r0,[r4,#4]            ;427
000238  706e              STRB     r6,[r5,#1]            ;428
00023a  e70a              B        |L3.82|
                  |L3.572|
00023c  7801              LDRB     r1,[r0,#0]            ;433  ; MSC_Machine
00023e  9800              LDR      r0,[sp,#0]            ;433
000240  f7fffffe          BL       HCD_GetURB_State
000244  2801              CMP      r0,#1                 ;435
000246  d00c              BEQ      |L3.610|
000248  2804              CMP      r0,#4                 ;444
00024a  d015              BEQ      |L3.632|
00024c  2803              CMP      r0,#3                 ;450
00024e  d191              BNE      |L3.372|
000250  7868              LDRB     r0,[r5,#1]            ;452  ; xfer_error_count
000252  1c40              ADDS     r0,r0,#1              ;452
000254  b2c0              UXTB     r0,r0                 ;452
000256  7068              STRB     r0,[r5,#1]            ;452
000258  2803              CMP      r0,#3                 ;454
00025a  d211              BCS      |L3.640|
00025c  7960              LDRB     r0,[r4,#5]            ;456  ; USBH_MSC_BOTXferParam
00025e  7120              STRB     r0,[r4,#4]            ;456
000260  e6f7              B        |L3.82|
                  |L3.610|
000262  612e              STR      r6,[r5,#0x10]         ;437  ; BOTStallErrorCount
000264  f8848005          STRB     r8,[r4,#5]            ;438
000268  78a0              LDRB     r0,[r4,#2]            ;440  ; USBH_MSC_BOTXferParam
00026a  7020              STRB     r0,[r4,#0]            ;440
00026c  e9dd0100          LDRD     r0,r1,[sp,#0]         ;442
000270  f7fffffe          BL       USBH_MSC_DecodeCSW
000274  73e0              STRB     r0,[r4,#0xf]          ;442
000276  e6ec              B        |L3.82|
                  |L3.632|
000278  702e              STRB     r6,[r5,#0]            ;446
00027a  f884b004          STRB     r11,[r4,#4]           ;447
00027e  e6e8              B        |L3.82|
                  |L3.640|
000280  73e7              STRB     r7,[r4,#0xf]          ;461
000282  e6e6              B        |L3.82|
                  |L3.644|
000284  e9dd0100          LDRD     r0,r1,[sp,#0]         ;467
000288  2200              MOVS     r2,#0                 ;467
00028a  f7fffffe          BL       USBH_MSC_BOT_Abort
00028e  b118              CBZ      r0,|L3.664|
000290  2804              CMP      r0,#4                 ;482
000292  d188              BNE      |L3.422|
000294  73e7              STRB     r7,[r4,#0xf]          ;485
000296  e6dc              B        |L3.82|
                  |L3.664|
000298  7828              LDRB     r0,[r5,#0]            ;471  ; error_direction
00029a  2802              CMP      r0,#2                 ;471
00029c  d002              BEQ      |L3.676|
00029e  7960              LDRB     r0,[r4,#5]            ;479  ; USBH_MSC_BOTXferParam
0002a0  7120              STRB     r0,[r4,#4]            ;479
0002a2  e6d6              B        |L3.82|
                  |L3.676|
0002a4  f8849004          STRB     r9,[r4,#4]            ;473
0002a8  e6d3              B        |L3.82|
                  |L3.682|
0002aa  e9dd0100          LDRD     r0,r1,[sp,#0]         ;490
0002ae  2201              MOVS     r2,#1                 ;490
0002b0  f7fffffe          BL       USBH_MSC_BOT_Abort
0002b4  b118              CBZ      r0,|L3.702|
0002b6  2804              CMP      r0,#4                 ;495
0002b8  d1a2              BNE      |L3.512|
0002ba  73e7              STRB     r7,[r4,#0xf]          ;498
0002bc  e6c9              B        |L3.82|
                  |L3.702|
0002be  7960              LDRB     r0,[r4,#5]            ;493  ; USBH_MSC_BOTXferParam
0002c0  7120              STRB     r0,[r4,#4]            ;493
0002c2  e6c6              B        |L3.82|
;;;507    
                          ENDP

                  |L3.708|
                          DCD      ||.bss||+0x30
                  |L3.712|
                          DCD      MSC_Machine
                  |L3.716|
                          DCD      ||.data||

                          AREA ||i.USBH_MSC_Init||, CODE, READONLY, ALIGN=2

                  USBH_MSC_Init PROC
;;;131    */
;;;132    void USBH_MSC_Init(USB_OTG_CORE_HANDLE *pdev )
000000  b510              PUSH     {r4,lr}
;;;133    {
;;;134      if(HCD_IsDeviceConnected(pdev))
000002  f7fffffe          BL       HCD_IsDeviceConnected
000006  2100              MOVS     r1,#0
000008  b148              CBZ      r0,|L4.30|
;;;135      {      
;;;136        USBH_MSC_CBWData.field.CBWSignature = USBH_MSC_BOT_CBW_SIGNATURE;
00000a  4808              LDR      r0,|L4.44|
00000c  4a06              LDR      r2,|L4.40|
00000e  6002              STR      r2,[r0,#0]  ; USBH_MSC_CBWData
;;;137        USBH_MSC_CBWData.field.CBWTag = USBH_MSC_BOT_CBW_TAG;
000010  4a07              LDR      r2,|L4.48|
000012  6042              STR      r2,[r0,#4]  ; USBH_MSC_CBWData
;;;138        USBH_MSC_CBWData.field.CBWLUN = 0;
000014  7341              STRB     r1,[r0,#0xd]
;;;139        USBH_MSC_BOTXferParam.CmdStateMachine = CMD_SEND_STATE;  
000016  4a05              LDR      r2,|L4.44|
000018  2001              MOVS     r0,#1
00001a  3230              ADDS     r2,r2,#0x30
00001c  70d0              STRB     r0,[r2,#3]
                  |L4.30|
;;;140      }
;;;141      
;;;142      BOTStallErrorCount = 0;
00001e  4805              LDR      r0,|L4.52|
000020  6101              STR      r1,[r0,#0x10]  ; BOTStallErrorCount
;;;143      MSCErrorCount = 0;
000022  4805              LDR      r0,|L4.56|
000024  7001              STRB     r1,[r0,#0]
;;;144    }
000026  bd10              POP      {r4,pc}
;;;145    
                          ENDP

                  |L4.40|
                          DCD      0x43425355
                  |L4.44|
                          DCD      ||.bss||
                  |L4.48|
                          DCD      0x20304050
                  |L4.52|
                          DCD      ||.data||
                  |L4.56|
                          DCD      MSCErrorCount

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  USBH_MSC_CBWData
                          %        32
                  USBH_MSC_CSWData
                          %        16
                  USBH_MSC_BOTXferParam
                          %        16

                          AREA ||.data||, DATA, ALIGN=2

                  error_direction
000000  00                DCB      0x00
                  xfer_error_count
000001  000000            DCB      0x00,0x00,0x00
                  remainingDataLength
                          DCD      0x00000000
                  datapointer
                          DCD      0x00000000
                  datapointer_prev
                          DCD      0x00000000
                  BOTStallErrorCount
                          DCD      0x00000000

;*** Start embedded assembler ***

#line 1 "..\\Libraries\\STM32_USB_HOST_Library\\Class\\MSC\\src\\usbh_msc_bot.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___14_usbh_msc_bot_c_2abeb359____REV16|
#line 129 "D:\\Keil_v5\\ARM\\CMSIS\\Include\\core_cmInstr.h"
|__asm___14_usbh_msc_bot_c_2abeb359____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___14_usbh_msc_bot_c_2abeb359____REVSH|
#line 144
|__asm___14_usbh_msc_bot_c_2abeb359____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
