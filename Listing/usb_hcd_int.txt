; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o..\output\usb_hcd_int.o --asm_dir=..\Listing\ --list_dir=..\Listing\ --depend=..\output\usb_hcd_int.d --cpu=Cortex-M4.fp --apcs=interwork -O1 --diag_suppress=9931,870 -I..\APP -I..\drive -I..\Include -I..\Libraries\CMSIS\inc -I..\Libraries\CMSIS\src -I..\Libraries\FWlib\inc -I..\Libraries\FWlib\src -I..\Listing -I..\Output -I..\Project -I..\STemWinLibrary522\Config -I..\STemWinLibrary522\emWinTask -I..\STemWinLibrary522\GUILib -I..\STemWinLibrary522\inc -I..\User -I..\USB\STM32_USB_HOST_Library\Class\HID\inc -I..\USB\STM32_USB_HOST_Library\Class\MSC\src -I..\USB\STM32_USB_HOST_Library\Core\src -I..\USB\USB_APP -I..\USB\STM32_USB_HOST_Library\Class\HID\src -I..\USB\STM32_USB_HOST_Library\Class\MSC\inc -I..\USB\STM32_USB_HOST_Library\Core\inc -I..\USB\STM32_USB_OTG_Driver\inc -I..\FATFS\exfuns -I..\FATFS\src\option -I..\FATFS\src -I..\MALLOC -I..\Libraries\STM32_USB_OTG_Driver\inc -I..\Libraries\STM32_USB_HOST_Library\Core\inc -I..\Libraries\STM32_USB_HOST_Library\Class\MSC\inc -I..\User\usbh_mass_storage -I..\User\fatfs\src -ID:\Keil_v5\ARM\RV31\INC -ID:\Keil_v5\ARM\CMSIS\Include -ID:\Keil_v5\ARM\INC\ST\STM32F4xx -D__UVISION_VERSION=525 -DUSE_STDPERIPH_DRIVER -DSTM32F40_41xxx -DUSE_USB_OTG_HS -DUSE_EMBEDDED_PHY -DSTM32F40XX --omf_browse=..\output\usb_hcd_int.crf --no_multibyte_chars ..\Libraries\STM32_USB_OTG_Driver\src\usb_hcd_int.c]
                          THUMB

                          AREA ||i.USBH_OTG_ISR_Handler||, CODE, READONLY, ALIGN=1

                  USBH_OTG_ISR_Handler PROC
;;;117    
;;;118    uint32_t USBH_OTG_ISR_Handler (USB_OTG_CORE_HANDLE *pdev)
000000  b538              PUSH     {r3-r5,lr}
;;;119    {
000002  4605              MOV      r5,r0
;;;120      USB_OTG_GINTSTS_TypeDef  gintsts;
;;;121      uint32_t retval = 0;
000004  2400              MOVS     r4,#0
;;;122      
;;;123      gintsts.d32 = 0;
000006  2000              MOVS     r0,#0
000008  9000              STR      r0,[sp,#0]
;;;124      
;;;125      /* Check if HOST Mode */
;;;126      if (USB_OTG_IsHostMode(pdev))
00000a  4628              MOV      r0,r5
00000c  f7fffffe          BL       USB_OTG_IsHostMode
000010  2800              CMP      r0,#0
000012  d047              BEQ      |L1.164|
;;;127      {
;;;128        gintsts.d32 = USB_OTG_ReadCoreItr(pdev);
000014  4628              MOV      r0,r5
000016  f7fffffe          BL       USB_OTG_ReadCoreItr
00001a  9000              STR      r0,[sp,#0]
;;;129        if (!gintsts.d32)
00001c  9800              LDR      r0,[sp,#0]
00001e  b908              CBNZ     r0,|L1.36|
;;;130        {
;;;131          return 0;
000020  2000              MOVS     r0,#0
                  |L1.34|
;;;132        }
;;;133        
;;;134        if (gintsts.b.sofintr)
;;;135        {
;;;136          retval |= USB_OTG_USBH_handle_sof_ISR (pdev);
;;;137        }
;;;138        
;;;139        if (gintsts.b.rxstsqlvl)
;;;140        {
;;;141          retval |= USB_OTG_USBH_handle_rx_qlvl_ISR (pdev);
;;;142        }
;;;143        
;;;144        if (gintsts.b.nptxfempty)
;;;145        {
;;;146          retval |= USB_OTG_USBH_handle_nptxfempty_ISR (pdev);
;;;147        }
;;;148        
;;;149        if (gintsts.b.ptxfempty)
;;;150        {
;;;151          retval |= USB_OTG_USBH_handle_ptxfempty_ISR (pdev);
;;;152        }    
;;;153        
;;;154        if (gintsts.b.hcintr)
;;;155        {
;;;156          retval |= USB_OTG_USBH_handle_hc_ISR (pdev);
;;;157        }
;;;158        
;;;159        if (gintsts.b.portintr)
;;;160        {
;;;161          retval |= USB_OTG_USBH_handle_port_ISR (pdev);
;;;162        }
;;;163        
;;;164        if (gintsts.b.disconnect)
;;;165        {
;;;166          retval |= USB_OTG_USBH_handle_Disconnect_ISR (pdev);  
;;;167          
;;;168        }
;;;169        
;;;170        if (gintsts.b.incomplisoout)
;;;171        {
;;;172          retval |= USB_OTG_USBH_handle_IncompletePeriodicXfer_ISR (pdev);
;;;173        }
;;;174        
;;;175        
;;;176      }
;;;177      return retval;
;;;178    }
000022  bd38              POP      {r3-r5,pc}
                  |L1.36|
000024  9800              LDR      r0,[sp,#0]            ;134
000026  f3c000c0          UBFX     r0,r0,#3,#1           ;134
00002a  b118              CBZ      r0,|L1.52|
00002c  4628              MOV      r0,r5                 ;136
00002e  f7fffffe          BL       USB_OTG_USBH_handle_sof_ISR
000032  4304              ORRS     r4,r4,r0              ;136
                  |L1.52|
000034  9800              LDR      r0,[sp,#0]            ;139
000036  f3c01000          UBFX     r0,r0,#4,#1           ;139
00003a  b118              CBZ      r0,|L1.68|
00003c  4628              MOV      r0,r5                 ;141
00003e  f7fffffe          BL       USB_OTG_USBH_handle_rx_qlvl_ISR
000042  4304              ORRS     r4,r4,r0              ;141
                  |L1.68|
000044  9800              LDR      r0,[sp,#0]            ;144
000046  f3c01040          UBFX     r0,r0,#5,#1           ;144
00004a  b118              CBZ      r0,|L1.84|
00004c  4628              MOV      r0,r5                 ;146
00004e  f7fffffe          BL       USB_OTG_USBH_handle_nptxfempty_ISR
000052  4304              ORRS     r4,r4,r0              ;146
                  |L1.84|
000054  9800              LDR      r0,[sp,#0]            ;149
000056  f3c06080          UBFX     r0,r0,#26,#1          ;149
00005a  b118              CBZ      r0,|L1.100|
00005c  4628              MOV      r0,r5                 ;151
00005e  f7fffffe          BL       USB_OTG_USBH_handle_ptxfempty_ISR
000062  4304              ORRS     r4,r4,r0              ;151
                  |L1.100|
000064  9800              LDR      r0,[sp,#0]            ;154
000066  f3c06040          UBFX     r0,r0,#25,#1          ;154
00006a  b118              CBZ      r0,|L1.116|
00006c  4628              MOV      r0,r5                 ;156
00006e  f7fffffe          BL       USB_OTG_USBH_handle_hc_ISR
000072  4304              ORRS     r4,r4,r0              ;156
                  |L1.116|
000074  9800              LDR      r0,[sp,#0]            ;159
000076  f3c06000          UBFX     r0,r0,#24,#1          ;159
00007a  b118              CBZ      r0,|L1.132|
00007c  4628              MOV      r0,r5                 ;161
00007e  f7fffffe          BL       USB_OTG_USBH_handle_port_ISR
000082  4304              ORRS     r4,r4,r0              ;161
                  |L1.132|
000084  9800              LDR      r0,[sp,#0]            ;164
000086  f3c07040          UBFX     r0,r0,#29,#1          ;164
00008a  b118              CBZ      r0,|L1.148|
00008c  4628              MOV      r0,r5                 ;166
00008e  f7fffffe          BL       USB_OTG_USBH_handle_Disconnect_ISR
000092  4304              ORRS     r4,r4,r0              ;166
                  |L1.148|
000094  9800              LDR      r0,[sp,#0]            ;170
000096  f3c05040          UBFX     r0,r0,#21,#1          ;170
00009a  b118              CBZ      r0,|L1.164|
00009c  4628              MOV      r0,r5                 ;172
00009e  f7fffffe          BL       USB_OTG_USBH_handle_IncompletePeriodicXfer_ISR
0000a2  4304              ORRS     r4,r4,r0              ;172
                  |L1.164|
0000a4  4620              MOV      r0,r4                 ;177
0000a6  e7bc              B        |L1.34|
;;;179    
                          ENDP


                          AREA ||i.USB_OTG_USBH_handle_Disconnect_ISR||, CODE, READONLY, ALIGN=2

                  USB_OTG_USBH_handle_Disconnect_ISR PROC
;;;243    */
;;;244    static uint32_t USB_OTG_USBH_handle_Disconnect_ISR (USB_OTG_CORE_HANDLE *pdev)
000000  b538              PUSH     {r3-r5,lr}
;;;245    {
000002  4604              MOV      r4,r0
;;;246      USB_OTG_GINTSTS_TypeDef      gintsts;
;;;247      
;;;248      gintsts.d32 = 0;
000004  2000              MOVS     r0,#0
000006  9000              STR      r0,[sp,#0]
;;;249      
;;;250      USBH_HCD_INT_fops->DevDisconnected(pdev);
000008  4807              LDR      r0,|L2.40|
00000a  6800              LDR      r0,[r0,#0]  ; USBH_HCD_INT_fops
00000c  6881              LDR      r1,[r0,#8]
00000e  4620              MOV      r0,r4
000010  4788              BLX      r1
;;;251      
;;;252      /* Clear interrupt */
;;;253      gintsts.b.disconnect = 1;
000012  9800              LDR      r0,[sp,#0]
000014  f0205000          BIC      r0,r0,#0x20000000
000018  f1005000          ADD      r0,r0,#0x20000000
00001c  9000              STR      r0,[sp,#0]
;;;254      USB_OTG_WRITE_REG32(&pdev->regs.GREGS->GINTSTS, gintsts.d32);
00001e  9800              LDR      r0,[sp,#0]
000020  68e1              LDR      r1,[r4,#0xc]
000022  6148              STR      r0,[r1,#0x14]
;;;255      
;;;256      return 1;
000024  2001              MOVS     r0,#1
;;;257    }
000026  bd38              POP      {r3-r5,pc}
;;;258    #if defined ( __ICCARM__ ) /*!< IAR Compiler */
                          ENDP

                  |L2.40|
                          DCD      USBH_HCD_INT_fops

                          AREA ||i.USB_OTG_USBH_handle_IncompletePeriodicXfer_ISR||, CODE, READONLY, ALIGN=1

                  USB_OTG_USBH_handle_IncompletePeriodicXfer_ISR PROC
;;;822    #endif /* __CC_ARM */
;;;823    static uint32_t USB_OTG_USBH_handle_IncompletePeriodicXfer_ISR (USB_OTG_CORE_HANDLE *pdev)
000000  b50c              PUSH     {r2,r3,lr}
;;;824    {
000002  4601              MOV      r1,r0
;;;825      
;;;826      USB_OTG_GINTSTS_TypeDef       gintsts;
;;;827      USB_OTG_HCCHAR_TypeDef        hcchar; 
;;;828      
;;;829      
;;;830      
;;;831      
;;;832      hcchar.d32 = USB_OTG_READ_REG32(&pdev->regs.HC_REGS[0]->HCCHAR);
000004  f8d10090          LDR      r0,[r1,#0x90]
000008  6800              LDR      r0,[r0,#0]
00000a  9000              STR      r0,[sp,#0]
;;;833      hcchar.b.chen = 1;
00000c  9800              LDR      r0,[sp,#0]
00000e  f0204000          BIC      r0,r0,#0x80000000
000012  f1004000          ADD      r0,r0,#0x80000000
000016  9000              STR      r0,[sp,#0]
;;;834      hcchar.b.chdis = 1;
000018  9800              LDR      r0,[sp,#0]
00001a  f0204080          BIC      r0,r0,#0x40000000
00001e  f1004080          ADD      r0,r0,#0x40000000
000022  9000              STR      r0,[sp,#0]
;;;835      USB_OTG_WRITE_REG32(&pdev->regs.HC_REGS[0]->HCCHAR, hcchar.d32);  
000024  9a00              LDR      r2,[sp,#0]
000026  f8d10090          LDR      r0,[r1,#0x90]
00002a  6002              STR      r2,[r0,#0]
;;;836      
;;;837      gintsts.d32 = 0;
00002c  2000              MOVS     r0,#0
00002e  9001              STR      r0,[sp,#4]
;;;838      /* Clear interrupt */
;;;839      gintsts.b.incomplisoout = 1;
000030  9801              LDR      r0,[sp,#4]
000032  f4201000          BIC      r0,r0,#0x200000
000036  f5001000          ADD      r0,r0,#0x200000
00003a  9001              STR      r0,[sp,#4]
;;;840      USB_OTG_WRITE_REG32(&pdev->regs.GREGS->GINTSTS, gintsts.d32);
00003c  9801              LDR      r0,[sp,#4]
00003e  68ca              LDR      r2,[r1,#0xc]
000040  6150              STR      r0,[r2,#0x14]
;;;841      
;;;842      return 1;
000042  2001              MOVS     r0,#1
;;;843    }
000044  bd0c              POP      {r2,r3,pc}
;;;844    
                          ENDP


                          AREA ||i.USB_OTG_USBH_handle_hc_ISR||, CODE, READONLY, ALIGN=1

                  USB_OTG_USBH_handle_hc_ISR PROC
;;;185    */
;;;186    static uint32_t USB_OTG_USBH_handle_hc_ISR (USB_OTG_CORE_HANDLE *pdev)
000000  b57c              PUSH     {r2-r6,lr}
;;;187    {
000002  4605              MOV      r5,r0
;;;188      USB_OTG_HAINT_TypeDef        haint;
;;;189      USB_OTG_HCCHAR_TypeDef       hcchar;
;;;190      uint32_t i = 0;
000004  2400              MOVS     r4,#0
;;;191      uint32_t retval = 0;
000006  2600              MOVS     r6,#0
;;;192      
;;;193      /* Clear appropriate bits in HCINTn to clear the interrupt bit in
;;;194      * GINTSTS */
;;;195      
;;;196      haint.d32 = USB_OTG_ReadHostAllChannels_intr(pdev);
000008  4628              MOV      r0,r5
00000a  f7fffffe          BL       USB_OTG_ReadHostAllChannels_intr
00000e  9001              STR      r0,[sp,#4]
;;;197      
;;;198      for (i = 0; i < pdev->cfg.host_channels ; i++)
000010  bf00              NOP      
000012  e01b              B        |L4.76|
                  |L4.20|
;;;199      {
;;;200        if (haint.b.chint & (1 << i))
000014  9801              LDR      r0,[sp,#4]
000016  b280              UXTH     r0,r0
000018  2101              MOVS     r1,#1
00001a  40a1              LSLS     r1,r1,r4
00001c  4008              ANDS     r0,r0,r1
00001e  b1a0              CBZ      r0,|L4.74|
;;;201        {
;;;202          hcchar.d32 = USB_OTG_READ_REG32(&pdev->regs.HC_REGS[i]->HCCHAR);
000020  f1050090          ADD      r0,r5,#0x90
000024  f8500024          LDR      r0,[r0,r4,LSL #2]
000028  6800              LDR      r0,[r0,#0]
00002a  9000              STR      r0,[sp,#0]
;;;203          
;;;204          if (hcchar.b.epdir)
00002c  9800              LDR      r0,[sp,#0]
00002e  f3c030c0          UBFX     r0,r0,#15,#1
000032  b128              CBZ      r0,|L4.64|
;;;205          {
;;;206            retval |= USB_OTG_USBH_handle_hc_n_In_ISR (pdev, i);
000034  4621              MOV      r1,r4
000036  4628              MOV      r0,r5
000038  f7fffffe          BL       USB_OTG_USBH_handle_hc_n_In_ISR
00003c  4306              ORRS     r6,r6,r0
00003e  e004              B        |L4.74|
                  |L4.64|
;;;207          }
;;;208          else
;;;209          {
;;;210            retval |=  USB_OTG_USBH_handle_hc_n_Out_ISR (pdev, i);
000040  4621              MOV      r1,r4
000042  4628              MOV      r0,r5
000044  f7fffffe          BL       USB_OTG_USBH_handle_hc_n_Out_ISR
000048  4306              ORRS     r6,r6,r0
                  |L4.74|
00004a  1c64              ADDS     r4,r4,#1              ;198
                  |L4.76|
00004c  7828              LDRB     r0,[r5,#0]            ;198
00004e  42a0              CMP      r0,r4                 ;198
000050  d8e0              BHI      |L4.20|
;;;211          }
;;;212        }
;;;213      }
;;;214      
;;;215      return retval;
000052  4630              MOV      r0,r6
;;;216    }
000054  bd7c              POP      {r2-r6,pc}
;;;217    
                          ENDP


                          AREA ||i.USB_OTG_USBH_handle_hc_n_In_ISR||, CODE, READONLY, ALIGN=1

                  USB_OTG_USBH_handle_hc_n_In_ISR PROC
;;;600    */
;;;601    uint32_t USB_OTG_USBH_handle_hc_n_In_ISR (USB_OTG_CORE_HANDLE *pdev , uint32_t num)
000000  b570              PUSH     {r4-r6,lr}
;;;602    {
000002  b086              SUB      sp,sp,#0x18
000004  4605              MOV      r5,r0
000006  460c              MOV      r4,r1
;;;603      USB_OTG_HCINTn_TypeDef     hcint;
;;;604      USB_OTG_HCINTMSK_TypeDef  hcintmsk;
;;;605      USB_OTG_HCCHAR_TypeDef     hcchar; 
;;;606      USB_OTG_HCTSIZn_TypeDef  hctsiz;
;;;607      USB_OTG_HC_REGS *hcreg;
;;;608      
;;;609      hcreg = pdev->regs.HC_REGS[num];
000008  f1050090          ADD      r0,r5,#0x90
00000c  f8506024          LDR      r6,[r0,r4,LSL #2]
;;;610      hcint.d32 = USB_OTG_READ_REG32(&hcreg->HCINT);
000010  68b0              LDR      r0,[r6,#8]
000012  9005              STR      r0,[sp,#0x14]
;;;611      hcintmsk.d32 = USB_OTG_READ_REG32(&hcreg->HCINTMSK);
000014  68f0              LDR      r0,[r6,#0xc]
000016  9004              STR      r0,[sp,#0x10]
;;;612      hcint.d32 = hcint.d32 & hcintmsk.d32;
000018  e9dd1004          LDRD     r1,r0,[sp,#0x10]
00001c  4008              ANDS     r0,r0,r1
00001e  9005              STR      r0,[sp,#0x14]
;;;613      hcchar.d32 = USB_OTG_READ_REG32(&pdev->regs.HC_REGS[num]->HCCHAR);
000020  f1050090          ADD      r0,r5,#0x90
000024  f8500024          LDR      r0,[r0,r4,LSL #2]
000028  6800              LDR      r0,[r0,#0]
00002a  9003              STR      r0,[sp,#0xc]
;;;614      hcintmsk.d32 = 0;
00002c  2000              MOVS     r0,#0
00002e  9004              STR      r0,[sp,#0x10]
;;;615      
;;;616      if (hcint.b.ahberr)
000030  9805              LDR      r0,[sp,#0x14]
000032  f3c00080          UBFX     r0,r0,#2,#1
000036  b1d0              CBZ      r0,|L5.110|
;;;617      {
;;;618        CLEAR_HC_INT(hcreg ,ahberr);
000038  2000              MOVS     r0,#0
00003a  9001              STR      r0,[sp,#4]
00003c  9801              LDR      r0,[sp,#4]
00003e  f0200004          BIC      r0,r0,#4
000042  1d00              ADDS     r0,r0,#4
000044  9001              STR      r0,[sp,#4]
000046  9801              LDR      r0,[sp,#4]
000048  60b0              STR      r0,[r6,#8]
;;;619        UNMASK_HOST_INT_CHH (num);
00004a  f1050090          ADD      r0,r5,#0x90
00004e  f8500024          LDR      r0,[r0,r4,LSL #2]
000052  68c0              LDR      r0,[r0,#0xc]
000054  9001              STR      r0,[sp,#4]
000056  9801              LDR      r0,[sp,#4]
000058  f0200002          BIC      r0,r0,#2
00005c  1c80              ADDS     r0,r0,#2
00005e  9001              STR      r0,[sp,#4]
000060  f1050090          ADD      r0,r5,#0x90
000064  f8500024          LDR      r0,[r0,r4,LSL #2]
000068  9901              LDR      r1,[sp,#4]
00006a  60c1              STR      r1,[r0,#0xc]
00006c  e073              B        |L5.342|
                  |L5.110|
;;;620      }  
;;;621      else if (hcint.b.ack)
00006e  9805              LDR      r0,[sp,#0x14]
000070  f3c01040          UBFX     r0,r0,#5,#1
000074  b148              CBZ      r0,|L5.138|
;;;622      {
;;;623        CLEAR_HC_INT(hcreg ,ack);
000076  2000              MOVS     r0,#0
000078  9001              STR      r0,[sp,#4]
00007a  9801              LDR      r0,[sp,#4]
00007c  f0200020          BIC      r0,r0,#0x20
000080  3020              ADDS     r0,r0,#0x20
000082  9001              STR      r0,[sp,#4]
000084  9801              LDR      r0,[sp,#4]
000086  60b0              STR      r0,[r6,#8]
000088  e065              B        |L5.342|
                  |L5.138|
;;;624      }
;;;625      
;;;626      else if (hcint.b.stall)  
00008a  9805              LDR      r0,[sp,#0x14]
00008c  f3c000c0          UBFX     r0,r0,#3,#1
000090  b378              CBZ      r0,|L5.242|
;;;627      {
;;;628        UNMASK_HOST_INT_CHH (num);
000092  f1050090          ADD      r0,r5,#0x90
000096  f8500024          LDR      r0,[r0,r4,LSL #2]
00009a  68c0              LDR      r0,[r0,#0xc]
00009c  9001              STR      r0,[sp,#4]
00009e  9801              LDR      r0,[sp,#4]
0000a0  f0200002          BIC      r0,r0,#2
0000a4  1c80              ADDS     r0,r0,#2
0000a6  9001              STR      r0,[sp,#4]
0000a8  f1050090          ADD      r0,r5,#0x90
0000ac  f8500024          LDR      r0,[r0,r4,LSL #2]
0000b0  9901              LDR      r1,[sp,#4]
0000b2  60c1              STR      r1,[r0,#0xc]
;;;629        pdev->host.HC_Status[num] = HC_STALL; 
0000b4  2105              MOVS     r1,#5
0000b6  f6050074          ADD      r0,r5,#0x874
0000ba  5501              STRB     r1,[r0,r4]
;;;630        CLEAR_HC_INT(hcreg , nak);   /* Clear the NAK Condition */
0000bc  2000              MOVS     r0,#0
0000be  9001              STR      r0,[sp,#4]
0000c0  9801              LDR      r0,[sp,#4]
0000c2  f0200010          BIC      r0,r0,#0x10
0000c6  3010              ADDS     r0,r0,#0x10
0000c8  9001              STR      r0,[sp,#4]
0000ca  9801              LDR      r0,[sp,#4]
0000cc  60b0              STR      r0,[r6,#8]
;;;631        CLEAR_HC_INT(hcreg , stall); /* Clear the STALL Condition */
0000ce  2000              MOVS     r0,#0
0000d0  9001              STR      r0,[sp,#4]
0000d2  9801              LDR      r0,[sp,#4]
0000d4  f0200008          BIC      r0,r0,#8
0000d8  3008              ADDS     r0,r0,#8
0000da  9001              STR      r0,[sp,#4]
0000dc  9801              LDR      r0,[sp,#4]
0000de  60b0              STR      r0,[r6,#8]
;;;632        hcint.b.nak = 0;           /* NOTE: When there is a 'stall', reset also nak, 
0000e0  9805              LDR      r0,[sp,#0x14]
0000e2  f0200010          BIC      r0,r0,#0x10
0000e6  9005              STR      r0,[sp,#0x14]
;;;633                                      else, the pdev->host.HC_Status = HC_STALL
;;;634        will be overwritten by 'nak' in code below */
;;;635        USB_OTG_HC_Halt(pdev, num);    
0000e8  b2e1              UXTB     r1,r4
0000ea  4628              MOV      r0,r5
0000ec  f7fffffe          BL       USB_OTG_HC_Halt
0000f0  e031              B        |L5.342|
                  |L5.242|
0000f2  e7ff              B        |L5.244|
                  |L5.244|
;;;636      }
;;;637      else if (hcint.b.datatglerr)
0000f4  9805              LDR      r0,[sp,#0x14]
0000f6  f3c02080          UBFX     r0,r0,#10,#1
0000fa  b360              CBZ      r0,|L5.342|
;;;638      {
;;;639        UNMASK_HOST_INT_CHH (num);
0000fc  f1050090          ADD      r0,r5,#0x90
000100  f8500024          LDR      r0,[r0,r4,LSL #2]
000104  68c0              LDR      r0,[r0,#0xc]
000106  9001              STR      r0,[sp,#4]
000108  9801              LDR      r0,[sp,#4]
00010a  f0200002          BIC      r0,r0,#2
00010e  1c80              ADDS     r0,r0,#2
000110  9001              STR      r0,[sp,#4]
000112  f1050090          ADD      r0,r5,#0x90
000116  f8500024          LDR      r0,[r0,r4,LSL #2]
00011a  9901              LDR      r1,[sp,#4]
00011c  60c1              STR      r1,[r0,#0xc]
;;;640        USB_OTG_HC_Halt(pdev, num);
00011e  b2e1              UXTB     r1,r4
000120  4628              MOV      r0,r5
000122  f7fffffe          BL       USB_OTG_HC_Halt
;;;641        CLEAR_HC_INT(hcreg , nak);   
000126  2000              MOVS     r0,#0
000128  9001              STR      r0,[sp,#4]
00012a  9801              LDR      r0,[sp,#4]
00012c  f0200010          BIC      r0,r0,#0x10
000130  3010              ADDS     r0,r0,#0x10
000132  9001              STR      r0,[sp,#4]
000134  9801              LDR      r0,[sp,#4]
000136  60b0              STR      r0,[r6,#8]
;;;642        pdev->host.HC_Status[num] = HC_DATATGLERR; 
000138  2108              MOVS     r1,#8
00013a  f6050074          ADD      r0,r5,#0x874
00013e  5501              STRB     r1,[r0,r4]
;;;643        CLEAR_HC_INT(hcreg , datatglerr);
000140  2000              MOVS     r0,#0
000142  9001              STR      r0,[sp,#4]
000144  9801              LDR      r0,[sp,#4]
000146  f4206080          BIC      r0,r0,#0x400
00014a  f5006080          ADD      r0,r0,#0x400
00014e  9001              STR      r0,[sp,#4]
000150  9801              LDR      r0,[sp,#4]
000152  60b0              STR      r0,[r6,#8]
000154  bf00              NOP      
                  |L5.342|
;;;644      }    
;;;645      
;;;646      if (hcint.b.frmovrun)
000156  9805              LDR      r0,[sp,#0x14]
000158  f3c02040          UBFX     r0,r0,#9,#1
00015c  b1f8              CBZ      r0,|L5.414|
;;;647      {
;;;648        UNMASK_HOST_INT_CHH (num);
00015e  f1050090          ADD      r0,r5,#0x90
000162  f8500024          LDR      r0,[r0,r4,LSL #2]
000166  68c0              LDR      r0,[r0,#0xc]
000168  9001              STR      r0,[sp,#4]
00016a  9801              LDR      r0,[sp,#4]
00016c  f0200002          BIC      r0,r0,#2
000170  1c80              ADDS     r0,r0,#2
000172  9001              STR      r0,[sp,#4]
000174  f1050090          ADD      r0,r5,#0x90
000178  f8500024          LDR      r0,[r0,r4,LSL #2]
00017c  9901              LDR      r1,[sp,#4]
00017e  60c1              STR      r1,[r0,#0xc]
;;;649        USB_OTG_HC_Halt(pdev, num);
000180  b2e1              UXTB     r1,r4
000182  4628              MOV      r0,r5
000184  f7fffffe          BL       USB_OTG_HC_Halt
;;;650        CLEAR_HC_INT(hcreg ,frmovrun);
000188  2000              MOVS     r0,#0
00018a  9001              STR      r0,[sp,#4]
00018c  9801              LDR      r0,[sp,#4]
00018e  f4207000          BIC      r0,r0,#0x200
000192  f5007000          ADD      r0,r0,#0x200
000196  9001              STR      r0,[sp,#4]
000198  9801              LDR      r0,[sp,#4]
00019a  60b0              STR      r0,[r6,#8]
                  |L5.412|
00019c  e13c              B        |L5.1048|
                  |L5.414|
;;;651      }
;;;652      
;;;653      else if (hcint.b.xfercompl)
00019e  9805              LDR      r0,[sp,#0x14]
0001a0  f0000001          AND      r0,r0,#1
0001a4  2800              CMP      r0,#0
0001a6  d071              BEQ      |L5.652|
;;;654      {
;;;655        if (pdev->cfg.dma_enable == 1)
0001a8  78e8              LDRB     r0,[r5,#3]
0001aa  2801              CMP      r0,#1
0001ac  d112              BNE      |L5.468|
;;;656        {
;;;657          hctsiz.d32 = USB_OTG_READ_REG32(&pdev->regs.HC_REGS[num]->HCTSIZ);
0001ae  f1050090          ADD      r0,r5,#0x90
0001b2  f8500024          LDR      r0,[r0,r4,LSL #2]
0001b6  6900              LDR      r0,[r0,#0x10]
0001b8  9002              STR      r0,[sp,#8]
;;;658          pdev->host.XferCnt[num] =  pdev->host.hc[num].xfer_len - hctsiz.b.xfersize;
0001ba  f6050094          ADD      r0,r5,#0x894
0001be  eb001044          ADD      r0,r0,r4,LSL #5
0001c2  6900              LDR      r0,[r0,#0x10]
0001c4  9902              LDR      r1,[sp,#8]
0001c6  f3c10112          UBFX     r1,r1,#0,#19
0001ca  1a41              SUBS     r1,r0,r1
0001cc  f6050038          ADD      r0,r5,#0x838
0001d0  f8401024          STR      r1,[r0,r4,LSL #2]
                  |L5.468|
;;;659        }
;;;660        
;;;661        pdev->host.HC_Status[num] = HC_XFRC;     
0001d4  2101              MOVS     r1,#1
0001d6  f6050074          ADD      r0,r5,#0x874
0001da  5501              STRB     r1,[r0,r4]
;;;662        pdev->host.ErrCnt [num]= 0;
0001dc  2100              MOVS     r1,#0
0001de  3878              SUBS     r0,r0,#0x78
0001e0  f8401024          STR      r1,[r0,r4,LSL #2]
;;;663        CLEAR_HC_INT(hcreg , xfercompl);
0001e4  2000              MOVS     r0,#0
0001e6  9001              STR      r0,[sp,#4]
0001e8  9801              LDR      r0,[sp,#4]
0001ea  f0200001          BIC      r0,r0,#1
0001ee  1c40              ADDS     r0,r0,#1
0001f0  9001              STR      r0,[sp,#4]
0001f2  9801              LDR      r0,[sp,#4]
0001f4  60b0              STR      r0,[r6,#8]
;;;664        
;;;665        if ((hcchar.b.eptype == EP_TYPE_CTRL)||
0001f6  9803              LDR      r0,[sp,#0xc]
0001f8  f3c04081          UBFX     r0,r0,#18,#2
0001fc  b120              CBZ      r0,|L5.520|
;;;666            (hcchar.b.eptype == EP_TYPE_BULK))
0001fe  9803              LDR      r0,[sp,#0xc]
000200  f3c04081          UBFX     r0,r0,#18,#2
000204  2802              CMP      r0,#2
000206  d12a              BNE      |L5.606|
                  |L5.520|
;;;667        {
;;;668          UNMASK_HOST_INT_CHH (num);
000208  f1050090          ADD      r0,r5,#0x90
00020c  f8500024          LDR      r0,[r0,r4,LSL #2]
000210  68c0              LDR      r0,[r0,#0xc]
000212  9001              STR      r0,[sp,#4]
000214  9801              LDR      r0,[sp,#4]
000216  f0200002          BIC      r0,r0,#2
00021a  1c80              ADDS     r0,r0,#2
00021c  9001              STR      r0,[sp,#4]
00021e  f1050090          ADD      r0,r5,#0x90
000222  f8500024          LDR      r0,[r0,r4,LSL #2]
000226  9901              LDR      r1,[sp,#4]
000228  60c1              STR      r1,[r0,#0xc]
;;;669          USB_OTG_HC_Halt(pdev, num);
00022a  b2e1              UXTB     r1,r4
00022c  4628              MOV      r0,r5
00022e  f7fffffe          BL       USB_OTG_HC_Halt
;;;670          CLEAR_HC_INT(hcreg , nak); 
000232  2000              MOVS     r0,#0
000234  9001              STR      r0,[sp,#4]
000236  9801              LDR      r0,[sp,#4]
000238  f0200010          BIC      r0,r0,#0x10
00023c  3010              ADDS     r0,r0,#0x10
00023e  9001              STR      r0,[sp,#4]
000240  9801              LDR      r0,[sp,#4]
000242  60b0              STR      r0,[r6,#8]
;;;671          pdev->host.hc[num].toggle_in ^= 1;
000244  f6050094          ADD      r0,r5,#0x894
000248  eb001044          ADD      r0,r0,r4,LSL #5
00024c  7e00              LDRB     r0,[r0,#0x18]
00024e  f0800101          EOR      r1,r0,#1
000252  f6050094          ADD      r0,r5,#0x894
000256  eb001044          ADD      r0,r0,r4,LSL #5
00025a  7601              STRB     r1,[r0,#0x18]
00025c  e0dc              B        |L5.1048|
                  |L5.606|
;;;672          
;;;673        }
;;;674        else if(hcchar.b.eptype == EP_TYPE_INTR)
00025e  9803              LDR      r0,[sp,#0xc]
000260  f3c04081          UBFX     r0,r0,#18,#2
000264  2803              CMP      r0,#3
000266  d199              BNE      |L5.412|
;;;675        {
;;;676          hcchar.b.oddfrm  = 1;
000268  9803              LDR      r0,[sp,#0xc]
00026a  f0205000          BIC      r0,r0,#0x20000000
00026e  f1005000          ADD      r0,r0,#0x20000000
000272  9003              STR      r0,[sp,#0xc]
;;;677          USB_OTG_WRITE_REG32(&pdev->regs.HC_REGS[num]->HCCHAR, hcchar.d32); 
000274  f1050090          ADD      r0,r5,#0x90
000278  f8500024          LDR      r0,[r0,r4,LSL #2]
00027c  9903              LDR      r1,[sp,#0xc]
00027e  6001              STR      r1,[r0,#0]
;;;678          pdev->host.URB_State[num] = URB_DONE;  
000280  2101              MOVS     r1,#1
000282  f6050083          ADD      r0,r5,#0x883
000286  5501              STRB     r1,[r0,r4]
000288  e0c6              B        |L5.1048|
00028a  e7ff              B        |L5.652|
                  |L5.652|
;;;679        } 
;;;680      }
;;;681      else if (hcint.b.chhltd)
00028c  9805              LDR      r0,[sp,#0x14]
00028e  f3c00040          UBFX     r0,r0,#1,#1
000292  2800              CMP      r0,#0
000294  d051              BEQ      |L5.826|
;;;682      {
;;;683        MASK_HOST_INT_CHH (num);
000296  f1050090          ADD      r0,r5,#0x90
00029a  f8500024          LDR      r0,[r0,r4,LSL #2]
00029e  68c0              LDR      r0,[r0,#0xc]
0002a0  9001              STR      r0,[sp,#4]
0002a2  9801              LDR      r0,[sp,#4]
0002a4  f0200002          BIC      r0,r0,#2
0002a8  9001              STR      r0,[sp,#4]
0002aa  f1050090          ADD      r0,r5,#0x90
0002ae  f8500024          LDR      r0,[r0,r4,LSL #2]
0002b2  9901              LDR      r1,[sp,#4]
0002b4  60c1              STR      r1,[r0,#0xc]
;;;684        
;;;685        if(pdev->host.HC_Status[num] == HC_XFRC)
0002b6  f6050074          ADD      r0,r5,#0x874
0002ba  5d00              LDRB     r0,[r0,r4]
0002bc  2801              CMP      r0,#1
0002be  d104              BNE      |L5.714|
;;;686        {
;;;687          pdev->host.URB_State[num] = URB_DONE;      
0002c0  2101              MOVS     r1,#1
0002c2  f6050083          ADD      r0,r5,#0x883
0002c6  5501              STRB     r1,[r0,r4]
0002c8  e02d              B        |L5.806|
                  |L5.714|
;;;688        }
;;;689        
;;;690        else if (pdev->host.HC_Status[num] == HC_STALL) 
0002ca  f6050074          ADD      r0,r5,#0x874
0002ce  5d00              LDRB     r0,[r0,r4]
0002d0  2805              CMP      r0,#5
0002d2  d104              BNE      |L5.734|
;;;691        {
;;;692          pdev->host.URB_State[num] = URB_STALL;
0002d4  2104              MOVS     r1,#4
0002d6  f6050083          ADD      r0,r5,#0x883
0002da  5501              STRB     r1,[r0,r4]
0002dc  e023              B        |L5.806|
                  |L5.734|
;;;693        }   
;;;694        
;;;695        else if((pdev->host.HC_Status[num] == HC_XACTERR) ||
0002de  f6050074          ADD      r0,r5,#0x874
0002e2  5d00              LDRB     r0,[r0,r4]
0002e4  2806              CMP      r0,#6
0002e6  d004              BEQ      |L5.754|
;;;696                (pdev->host.HC_Status[num] == HC_DATATGLERR))
0002e8  f6050074          ADD      r0,r5,#0x874
0002ec  5d00              LDRB     r0,[r0,r4]
0002ee  2808              CMP      r0,#8
0002f0  d108              BNE      |L5.772|
                  |L5.754|
;;;697        {
;;;698          pdev->host.ErrCnt[num] = 0;
0002f2  2100              MOVS     r1,#0
0002f4  f20570fc          ADD      r0,r5,#0x7fc
0002f8  f8401024          STR      r1,[r0,r4,LSL #2]
;;;699          pdev->host.URB_State[num] = URB_ERROR;  
0002fc  2103              MOVS     r1,#3
0002fe  3087              ADDS     r0,r0,#0x87
000300  5501              STRB     r1,[r0,r4]
000302  e010              B        |L5.806|
                  |L5.772|
;;;700          
;;;701        }
;;;702        else if(hcchar.b.eptype == EP_TYPE_INTR)
000304  9803              LDR      r0,[sp,#0xc]
000306  f3c04081          UBFX     r0,r0,#18,#2
00030a  2803              CMP      r0,#3
00030c  d10b              BNE      |L5.806|
;;;703        {
;;;704          pdev->host.hc[num].toggle_in ^= 1;
00030e  f6050094          ADD      r0,r5,#0x894
000312  eb001044          ADD      r0,r0,r4,LSL #5
000316  7e00              LDRB     r0,[r0,#0x18]
000318  f0800101          EOR      r1,r0,#1
00031c  f6050094          ADD      r0,r5,#0x894
000320  eb001044          ADD      r0,r0,r4,LSL #5
000324  7601              STRB     r1,[r0,#0x18]
                  |L5.806|
;;;705        }
;;;706        
;;;707        CLEAR_HC_INT(hcreg , chhltd);    
000326  2000              MOVS     r0,#0
000328  9001              STR      r0,[sp,#4]
00032a  9801              LDR      r0,[sp,#4]
00032c  f0200002          BIC      r0,r0,#2
000330  1c80              ADDS     r0,r0,#2
000332  9001              STR      r0,[sp,#4]
000334  9801              LDR      r0,[sp,#4]
000336  60b0              STR      r0,[r6,#8]
000338  e06e              B        |L5.1048|
                  |L5.826|
;;;708        
;;;709      }    
;;;710      else if (hcint.b.xacterr)
00033a  9805              LDR      r0,[sp,#0x14]
00033c  f3c010c0          UBFX     r0,r0,#7,#1
000340  b310              CBZ      r0,|L5.904|
;;;711      {
;;;712        UNMASK_HOST_INT_CHH (num);
000342  f1050090          ADD      r0,r5,#0x90
000346  f8500024          LDR      r0,[r0,r4,LSL #2]
00034a  68c0              LDR      r0,[r0,#0xc]
00034c  9001              STR      r0,[sp,#4]
00034e  9801              LDR      r0,[sp,#4]
000350  f0200002          BIC      r0,r0,#2
000354  1c80              ADDS     r0,r0,#2
000356  9001              STR      r0,[sp,#4]
000358  f1050090          ADD      r0,r5,#0x90
00035c  f8500024          LDR      r0,[r0,r4,LSL #2]
000360  9901              LDR      r1,[sp,#4]
000362  60c1              STR      r1,[r0,#0xc]
;;;713        pdev->host.HC_Status[num] = HC_XACTERR;
000364  2106              MOVS     r1,#6
000366  f6050074          ADD      r0,r5,#0x874
00036a  5501              STRB     r1,[r0,r4]
;;;714        USB_OTG_HC_Halt(pdev, num);
00036c  b2e1              UXTB     r1,r4
00036e  4628              MOV      r0,r5
000370  f7fffffe          BL       USB_OTG_HC_Halt
;;;715        CLEAR_HC_INT(hcreg , xacterr);    
000374  2000              MOVS     r0,#0
000376  9001              STR      r0,[sp,#4]
000378  9801              LDR      r0,[sp,#4]
00037a  f0200080          BIC      r0,r0,#0x80
00037e  3080              ADDS     r0,r0,#0x80
000380  9001              STR      r0,[sp,#4]
000382  9801              LDR      r0,[sp,#4]
000384  60b0              STR      r0,[r6,#8]
000386  e047              B        |L5.1048|
                  |L5.904|
;;;716      }
;;;717      else if (hcint.b.nak)  
000388  9805              LDR      r0,[sp,#0x14]
00038a  f3c01000          UBFX     r0,r0,#4,#1
00038e  b3e0              CBZ      r0,|L5.1034|
;;;718      {  
;;;719        if(hcchar.b.eptype == EP_TYPE_INTR)
000390  9803              LDR      r0,[sp,#0xc]
000392  f3c04081          UBFX     r0,r0,#18,#2
000396  2803              CMP      r0,#3
000398  d116              BNE      |L5.968|
;;;720        {
;;;721          UNMASK_HOST_INT_CHH (num);
00039a  f1050090          ADD      r0,r5,#0x90
00039e  f8500024          LDR      r0,[r0,r4,LSL #2]
0003a2  68c0              LDR      r0,[r0,#0xc]
0003a4  9001              STR      r0,[sp,#4]
0003a6  9801              LDR      r0,[sp,#4]
0003a8  f0200002          BIC      r0,r0,#2
0003ac  1c80              ADDS     r0,r0,#2
0003ae  9001              STR      r0,[sp,#4]
0003b0  f1050090          ADD      r0,r5,#0x90
0003b4  f8500024          LDR      r0,[r0,r4,LSL #2]
0003b8  9901              LDR      r1,[sp,#4]
0003ba  60c1              STR      r1,[r0,#0xc]
;;;722          if (pdev->cfg.dma_enable == 0)
0003bc  78e8              LDRB     r0,[r5,#3]
0003be  b918              CBNZ     r0,|L5.968|
;;;723          {
;;;724            USB_OTG_HC_Halt(pdev, num);
0003c0  b2e1              UXTB     r1,r4
0003c2  4628              MOV      r0,r5
0003c4  f7fffffe          BL       USB_OTG_HC_Halt
                  |L5.968|
;;;725          }
;;;726        }
;;;727        
;;;728        pdev->host.HC_Status[num] = HC_NAK;
0003c8  2103              MOVS     r1,#3
0003ca  f6050074          ADD      r0,r5,#0x874
0003ce  5501              STRB     r1,[r0,r4]
;;;729        CLEAR_HC_INT(hcreg , nak);  
0003d0  2000              MOVS     r0,#0
0003d2  9001              STR      r0,[sp,#4]
0003d4  9801              LDR      r0,[sp,#4]
0003d6  f0200010          BIC      r0,r0,#0x10
0003da  3010              ADDS     r0,r0,#0x10
0003dc  9001              STR      r0,[sp,#4]
0003de  9801              LDR      r0,[sp,#4]
0003e0  60b0              STR      r0,[r6,#8]
;;;730        
;;;731        if  ((hcchar.b.eptype == EP_TYPE_CTRL)||
0003e2  9803              LDR      r0,[sp,#0xc]
0003e4  f3c04081          UBFX     r0,r0,#18,#2
0003e8  b120              CBZ      r0,|L5.1012|
;;;732                  (hcchar.b.eptype == EP_TYPE_BULK))
0003ea  9803              LDR      r0,[sp,#0xc]
0003ec  f3c04081          UBFX     r0,r0,#18,#2
0003f0  2802              CMP      r0,#2
0003f2  d111              BNE      |L5.1048|
                  |L5.1012|
;;;733        {
;;;734          /* re-activate the channel  */
;;;735          hcchar.b.chen = 1;
0003f4  9803              LDR      r0,[sp,#0xc]
0003f6  f0204000          BIC      r0,r0,#0x80000000
0003fa  f1004000          ADD      r0,r0,#0x80000000
0003fe  9003              STR      r0,[sp,#0xc]
;;;736          hcchar.b.chdis = 0;
000400  9803              LDR      r0,[sp,#0xc]
000402  f0204080          BIC      r0,r0,#0x40000000
000406  9003              STR      r0,[sp,#0xc]
;;;737          USB_OTG_WRITE_REG32(&pdev->regs.HC_REGS[num]->HCCHAR, hcchar.d32); 
000408  e000              B        |L5.1036|
                  |L5.1034|
00040a  e005              B        |L5.1048|
                  |L5.1036|
00040c  f1050090          ADD      r0,r5,#0x90
000410  f8500024          LDR      r0,[r0,r4,LSL #2]
000414  9903              LDR      r1,[sp,#0xc]
000416  6001              STR      r1,[r0,#0]
                  |L5.1048|
;;;738        }
;;;739      }
;;;740      
;;;741      
;;;742      return 1;
000418  2001              MOVS     r0,#1
;;;743      
;;;744    }
00041a  b006              ADD      sp,sp,#0x18
00041c  bd70              POP      {r4-r6,pc}
;;;745    
                          ENDP


                          AREA ||i.USB_OTG_USBH_handle_hc_n_Out_ISR||, CODE, READONLY, ALIGN=1

                  USB_OTG_USBH_handle_hc_n_Out_ISR PROC
;;;463    */
;;;464    uint32_t USB_OTG_USBH_handle_hc_n_Out_ISR (USB_OTG_CORE_HANDLE *pdev , uint32_t num)
000000  b57f              PUSH     {r0-r6,lr}
;;;465    {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;466      
;;;467      USB_OTG_HCINTn_TypeDef     hcint;
;;;468      USB_OTG_HCINTMSK_TypeDef  hcintmsk;
;;;469      USB_OTG_HC_REGS *hcreg;
;;;470      USB_OTG_HCCHAR_TypeDef     hcchar; 
;;;471      
;;;472      hcreg = pdev->regs.HC_REGS[num];
000006  f1050090          ADD      r0,r5,#0x90
00000a  f8506024          LDR      r6,[r0,r4,LSL #2]
;;;473      hcint.d32 = USB_OTG_READ_REG32(&hcreg->HCINT);
00000e  68b0              LDR      r0,[r6,#8]
000010  9003              STR      r0,[sp,#0xc]
;;;474      hcintmsk.d32 = USB_OTG_READ_REG32(&hcreg->HCINTMSK);
000012  68f0              LDR      r0,[r6,#0xc]
000014  9002              STR      r0,[sp,#8]
;;;475      hcint.d32 = hcint.d32 & hcintmsk.d32;
000016  e9dd1002          LDRD     r1,r0,[sp,#8]
00001a  4008              ANDS     r0,r0,r1
00001c  9003              STR      r0,[sp,#0xc]
;;;476      
;;;477      hcchar.d32 = USB_OTG_READ_REG32(&pdev->regs.HC_REGS[num]->HCCHAR);
00001e  f1050090          ADD      r0,r5,#0x90
000022  f8500024          LDR      r0,[r0,r4,LSL #2]
000026  6800              LDR      r0,[r0,#0]
000028  9001              STR      r0,[sp,#4]
;;;478      
;;;479      if (hcint.b.ahberr)
00002a  9803              LDR      r0,[sp,#0xc]
00002c  f3c00080          UBFX     r0,r0,#2,#1
000030  b1d0              CBZ      r0,|L6.104|
;;;480      {
;;;481        CLEAR_HC_INT(hcreg ,ahberr);
000032  2000              MOVS     r0,#0
000034  9000              STR      r0,[sp,#0]
000036  9800              LDR      r0,[sp,#0]
000038  f0200004          BIC      r0,r0,#4
00003c  1d00              ADDS     r0,r0,#4
00003e  9000              STR      r0,[sp,#0]
000040  9800              LDR      r0,[sp,#0]
000042  60b0              STR      r0,[r6,#8]
;;;482        UNMASK_HOST_INT_CHH (num);
000044  f1050090          ADD      r0,r5,#0x90
000048  f8500024          LDR      r0,[r0,r4,LSL #2]
00004c  68c0              LDR      r0,[r0,#0xc]
00004e  9000              STR      r0,[sp,#0]
000050  9800              LDR      r0,[sp,#0]
000052  f0200002          BIC      r0,r0,#2
000056  1c80              ADDS     r0,r0,#2
000058  9000              STR      r0,[sp,#0]
00005a  f1050090          ADD      r0,r5,#0x90
00005e  f8500024          LDR      r0,[r0,r4,LSL #2]
000062  9900              LDR      r1,[sp,#0]
000064  60c1              STR      r1,[r0,#0xc]
000066  e1a4              B        |L6.946|
                  |L6.104|
;;;483      } 
;;;484      else if (hcint.b.ack)
000068  9803              LDR      r0,[sp,#0xc]
00006a  f3c01040          UBFX     r0,r0,#5,#1
00006e  b148              CBZ      r0,|L6.132|
;;;485      {
;;;486        CLEAR_HC_INT(hcreg , ack);
000070  2000              MOVS     r0,#0
000072  9000              STR      r0,[sp,#0]
000074  9800              LDR      r0,[sp,#0]
000076  f0200020          BIC      r0,r0,#0x20
00007a  3020              ADDS     r0,r0,#0x20
00007c  9000              STR      r0,[sp,#0]
00007e  9800              LDR      r0,[sp,#0]
000080  60b0              STR      r0,[r6,#8]
000082  e196              B        |L6.946|
                  |L6.132|
;;;487      }
;;;488      else if (hcint.b.frmovrun)
000084  9803              LDR      r0,[sp,#0xc]
000086  f3c02040          UBFX     r0,r0,#9,#1
00008a  b1f8              CBZ      r0,|L6.204|
;;;489      {
;;;490        UNMASK_HOST_INT_CHH (num);
00008c  f1050090          ADD      r0,r5,#0x90
000090  f8500024          LDR      r0,[r0,r4,LSL #2]
000094  68c0              LDR      r0,[r0,#0xc]
000096  9000              STR      r0,[sp,#0]
000098  9800              LDR      r0,[sp,#0]
00009a  f0200002          BIC      r0,r0,#2
00009e  1c80              ADDS     r0,r0,#2
0000a0  9000              STR      r0,[sp,#0]
0000a2  f1050090          ADD      r0,r5,#0x90
0000a6  f8500024          LDR      r0,[r0,r4,LSL #2]
0000aa  9900              LDR      r1,[sp,#0]
0000ac  60c1              STR      r1,[r0,#0xc]
;;;491        USB_OTG_HC_Halt(pdev, num);
0000ae  b2e1              UXTB     r1,r4
0000b0  4628              MOV      r0,r5
0000b2  f7fffffe          BL       USB_OTG_HC_Halt
;;;492        CLEAR_HC_INT(hcreg ,frmovrun);
0000b6  2000              MOVS     r0,#0
0000b8  9000              STR      r0,[sp,#0]
0000ba  9800              LDR      r0,[sp,#0]
0000bc  f4207000          BIC      r0,r0,#0x200
0000c0  f5007000          ADD      r0,r0,#0x200
0000c4  9000              STR      r0,[sp,#0]
0000c6  9800              LDR      r0,[sp,#0]
0000c8  60b0              STR      r0,[r6,#8]
0000ca  e172              B        |L6.946|
                  |L6.204|
;;;493      }
;;;494      else if (hcint.b.xfercompl)
0000cc  9803              LDR      r0,[sp,#0xc]
0000ce  f0000001          AND      r0,r0,#1
0000d2  b338              CBZ      r0,|L6.292|
;;;495      {
;;;496        pdev->host.ErrCnt[num] = 0;
0000d4  2100              MOVS     r1,#0
0000d6  f20570fc          ADD      r0,r5,#0x7fc
0000da  f8401024          STR      r1,[r0,r4,LSL #2]
;;;497        UNMASK_HOST_INT_CHH (num);
0000de  f1050090          ADD      r0,r5,#0x90
0000e2  f8500024          LDR      r0,[r0,r4,LSL #2]
0000e6  68c0              LDR      r0,[r0,#0xc]
0000e8  9000              STR      r0,[sp,#0]
0000ea  9800              LDR      r0,[sp,#0]
0000ec  f0200002          BIC      r0,r0,#2
0000f0  1c80              ADDS     r0,r0,#2
0000f2  9000              STR      r0,[sp,#0]
0000f4  f1050090          ADD      r0,r5,#0x90
0000f8  f8500024          LDR      r0,[r0,r4,LSL #2]
0000fc  9900              LDR      r1,[sp,#0]
0000fe  60c1              STR      r1,[r0,#0xc]
;;;498        USB_OTG_HC_Halt(pdev, num);
000100  b2e1              UXTB     r1,r4
000102  4628              MOV      r0,r5
000104  f7fffffe          BL       USB_OTG_HC_Halt
;;;499        CLEAR_HC_INT(hcreg , xfercompl);
000108  2000              MOVS     r0,#0
00010a  9000              STR      r0,[sp,#0]
00010c  9800              LDR      r0,[sp,#0]
00010e  f0200001          BIC      r0,r0,#1
000112  1c40              ADDS     r0,r0,#1
000114  9000              STR      r0,[sp,#0]
000116  9800              LDR      r0,[sp,#0]
000118  60b0              STR      r0,[r6,#8]
;;;500        pdev->host.HC_Status[num] = HC_XFRC;            
00011a  2101              MOVS     r1,#1
00011c  f6050074          ADD      r0,r5,#0x874
000120  5501              STRB     r1,[r0,r4]
000122  e146              B        |L6.946|
                  |L6.292|
;;;501      }
;;;502      
;;;503      else if (hcint.b.stall)
000124  9803              LDR      r0,[sp,#0xc]
000126  f3c000c0          UBFX     r0,r0,#3,#1
00012a  b310              CBZ      r0,|L6.370|
;;;504      {
;;;505        CLEAR_HC_INT(hcreg , stall);
00012c  2000              MOVS     r0,#0
00012e  9000              STR      r0,[sp,#0]
000130  9800              LDR      r0,[sp,#0]
000132  f0200008          BIC      r0,r0,#8
000136  3008              ADDS     r0,r0,#8
000138  9000              STR      r0,[sp,#0]
00013a  9800              LDR      r0,[sp,#0]
00013c  60b0              STR      r0,[r6,#8]
;;;506        UNMASK_HOST_INT_CHH (num);
00013e  f1050090          ADD      r0,r5,#0x90
000142  f8500024          LDR      r0,[r0,r4,LSL #2]
000146  68c0              LDR      r0,[r0,#0xc]
000148  9000              STR      r0,[sp,#0]
00014a  9800              LDR      r0,[sp,#0]
00014c  f0200002          BIC      r0,r0,#2
000150  1c80              ADDS     r0,r0,#2
000152  9000              STR      r0,[sp,#0]
000154  f1050090          ADD      r0,r5,#0x90
000158  f8500024          LDR      r0,[r0,r4,LSL #2]
00015c  9900              LDR      r1,[sp,#0]
00015e  60c1              STR      r1,[r0,#0xc]
;;;507        USB_OTG_HC_Halt(pdev, num);
000160  b2e1              UXTB     r1,r4
000162  4628              MOV      r0,r5
000164  f7fffffe          BL       USB_OTG_HC_Halt
;;;508        pdev->host.HC_Status[num] = HC_STALL;      
000168  2105              MOVS     r1,#5
00016a  f6050074          ADD      r0,r5,#0x874
00016e  5501              STRB     r1,[r0,r4]
000170  e11f              B        |L6.946|
                  |L6.370|
;;;509      }
;;;510      
;;;511      else if (hcint.b.nak)
000172  9803              LDR      r0,[sp,#0xc]
000174  f3c01000          UBFX     r0,r0,#4,#1
000178  b348              CBZ      r0,|L6.462|
;;;512      {
;;;513        pdev->host.ErrCnt[num] = 0;
00017a  2100              MOVS     r1,#0
00017c  f20570fc          ADD      r0,r5,#0x7fc
000180  f8401024          STR      r1,[r0,r4,LSL #2]
;;;514        UNMASK_HOST_INT_CHH (num);
000184  f1050090          ADD      r0,r5,#0x90
000188  f8500024          LDR      r0,[r0,r4,LSL #2]
00018c  68c0              LDR      r0,[r0,#0xc]
00018e  9000              STR      r0,[sp,#0]
000190  9800              LDR      r0,[sp,#0]
000192  f0200002          BIC      r0,r0,#2
000196  1c80              ADDS     r0,r0,#2
000198  9000              STR      r0,[sp,#0]
00019a  f1050090          ADD      r0,r5,#0x90
00019e  f8500024          LDR      r0,[r0,r4,LSL #2]
0001a2  9900              LDR      r1,[sp,#0]
0001a4  60c1              STR      r1,[r0,#0xc]
;;;515        if (pdev->cfg.dma_enable == 0)
0001a6  78e8              LDRB     r0,[r5,#3]
0001a8  b918              CBNZ     r0,|L6.434|
;;;516        {
;;;517          USB_OTG_HC_Halt(pdev, num);
0001aa  b2e1              UXTB     r1,r4
0001ac  4628              MOV      r0,r5
0001ae  f7fffffe          BL       USB_OTG_HC_Halt
                  |L6.434|
;;;518        }
;;;519        CLEAR_HC_INT(hcreg , nak);
0001b2  2000              MOVS     r0,#0
0001b4  9000              STR      r0,[sp,#0]
0001b6  9800              LDR      r0,[sp,#0]
0001b8  f0200010          BIC      r0,r0,#0x10
0001bc  3010              ADDS     r0,r0,#0x10
0001be  9000              STR      r0,[sp,#0]
0001c0  9800              LDR      r0,[sp,#0]
0001c2  60b0              STR      r0,[r6,#8]
;;;520        pdev->host.HC_Status[num] = HC_NAK;      
0001c4  2103              MOVS     r1,#3
0001c6  f6050074          ADD      r0,r5,#0x874
0001ca  5501              STRB     r1,[r0,r4]
0001cc  e0f1              B        |L6.946|
                  |L6.462|
;;;521      }
;;;522      
;;;523      else if (hcint.b.xacterr)
0001ce  9803              LDR      r0,[sp,#0xc]
0001d0  f3c010c0          UBFX     r0,r0,#7,#1
0001d4  b310              CBZ      r0,|L6.540|
;;;524      {
;;;525        UNMASK_HOST_INT_CHH (num);
0001d6  f1050090          ADD      r0,r5,#0x90
0001da  f8500024          LDR      r0,[r0,r4,LSL #2]
0001de  68c0              LDR      r0,[r0,#0xc]
0001e0  9000              STR      r0,[sp,#0]
0001e2  9800              LDR      r0,[sp,#0]
0001e4  f0200002          BIC      r0,r0,#2
0001e8  1c80              ADDS     r0,r0,#2
0001ea  9000              STR      r0,[sp,#0]
0001ec  f1050090          ADD      r0,r5,#0x90
0001f0  f8500024          LDR      r0,[r0,r4,LSL #2]
0001f4  9900              LDR      r1,[sp,#0]
0001f6  60c1              STR      r1,[r0,#0xc]
;;;526        USB_OTG_HC_Halt(pdev, num);
0001f8  b2e1              UXTB     r1,r4
0001fa  4628              MOV      r0,r5
0001fc  f7fffffe          BL       USB_OTG_HC_Halt
;;;527        pdev->host.HC_Status[num] = HC_XACTERR;
000200  2106              MOVS     r1,#6
000202  f6050074          ADD      r0,r5,#0x874
000206  5501              STRB     r1,[r0,r4]
;;;528        CLEAR_HC_INT(hcreg , xacterr);
000208  2000              MOVS     r0,#0
00020a  9000              STR      r0,[sp,#0]
00020c  9800              LDR      r0,[sp,#0]
00020e  f0200080          BIC      r0,r0,#0x80
000212  3080              ADDS     r0,r0,#0x80
000214  9000              STR      r0,[sp,#0]
000216  9800              LDR      r0,[sp,#0]
000218  60b0              STR      r0,[r6,#8]
00021a  e0ca              B        |L6.946|
                  |L6.540|
;;;529      }
;;;530      else if (hcint.b.nyet)
00021c  9803              LDR      r0,[sp,#0xc]
00021e  f3c01080          UBFX     r0,r0,#6,#1
000222  b348              CBZ      r0,|L6.632|
;;;531      {
;;;532        pdev->host.ErrCnt[num] = 0;
000224  2100              MOVS     r1,#0
000226  f20570fc          ADD      r0,r5,#0x7fc
00022a  f8401024          STR      r1,[r0,r4,LSL #2]
;;;533        UNMASK_HOST_INT_CHH (num);
00022e  f1050090          ADD      r0,r5,#0x90
000232  f8500024          LDR      r0,[r0,r4,LSL #2]
000236  68c0              LDR      r0,[r0,#0xc]
000238  9000              STR      r0,[sp,#0]
00023a  9800              LDR      r0,[sp,#0]
00023c  f0200002          BIC      r0,r0,#2
000240  1c80              ADDS     r0,r0,#2
000242  9000              STR      r0,[sp,#0]
000244  f1050090          ADD      r0,r5,#0x90
000248  f8500024          LDR      r0,[r0,r4,LSL #2]
00024c  9900              LDR      r1,[sp,#0]
00024e  60c1              STR      r1,[r0,#0xc]
;;;534        if (pdev->cfg.dma_enable == 0)
000250  78e8              LDRB     r0,[r5,#3]
000252  b918              CBNZ     r0,|L6.604|
;;;535        {
;;;536          USB_OTG_HC_Halt(pdev, num);
000254  b2e1              UXTB     r1,r4
000256  4628              MOV      r0,r5
000258  f7fffffe          BL       USB_OTG_HC_Halt
                  |L6.604|
;;;537        }
;;;538        CLEAR_HC_INT(hcreg , nyet);
00025c  2000              MOVS     r0,#0
00025e  9000              STR      r0,[sp,#0]
000260  9800              LDR      r0,[sp,#0]
000262  f0200040          BIC      r0,r0,#0x40
000266  3040              ADDS     r0,r0,#0x40
000268  9000              STR      r0,[sp,#0]
00026a  9800              LDR      r0,[sp,#0]
00026c  60b0              STR      r0,[r6,#8]
;;;539        pdev->host.HC_Status[num] = HC_NYET;    
00026e  2104              MOVS     r1,#4
000270  f6050074          ADD      r0,r5,#0x874
000274  5501              STRB     r1,[r0,r4]
000276  e09c              B        |L6.946|
                  |L6.632|
;;;540      }
;;;541      else if (hcint.b.datatglerr)
000278  9803              LDR      r0,[sp,#0xc]
00027a  f3c02080          UBFX     r0,r0,#10,#1
00027e  b360              CBZ      r0,|L6.730|
;;;542      {
;;;543        UNMASK_HOST_INT_CHH (num);
000280  f1050090          ADD      r0,r5,#0x90
000284  f8500024          LDR      r0,[r0,r4,LSL #2]
000288  68c0              LDR      r0,[r0,#0xc]
00028a  9000              STR      r0,[sp,#0]
00028c  9800              LDR      r0,[sp,#0]
00028e  f0200002          BIC      r0,r0,#2
000292  1c80              ADDS     r0,r0,#2
000294  9000              STR      r0,[sp,#0]
000296  f1050090          ADD      r0,r5,#0x90
00029a  f8500024          LDR      r0,[r0,r4,LSL #2]
00029e  9900              LDR      r1,[sp,#0]
0002a0  60c1              STR      r1,[r0,#0xc]
;;;544        USB_OTG_HC_Halt(pdev, num);
0002a2  b2e1              UXTB     r1,r4
0002a4  4628              MOV      r0,r5
0002a6  f7fffffe          BL       USB_OTG_HC_Halt
;;;545        CLEAR_HC_INT(hcreg , nak);   
0002aa  2000              MOVS     r0,#0
0002ac  9000              STR      r0,[sp,#0]
0002ae  9800              LDR      r0,[sp,#0]
0002b0  f0200010          BIC      r0,r0,#0x10
0002b4  3010              ADDS     r0,r0,#0x10
0002b6  9000              STR      r0,[sp,#0]
0002b8  9800              LDR      r0,[sp,#0]
0002ba  60b0              STR      r0,[r6,#8]
;;;546        pdev->host.HC_Status[num] = HC_DATATGLERR;
0002bc  2108              MOVS     r1,#8
0002be  f6050074          ADD      r0,r5,#0x874
0002c2  5501              STRB     r1,[r0,r4]
;;;547        
;;;548        CLEAR_HC_INT(hcreg , datatglerr);
0002c4  2000              MOVS     r0,#0
0002c6  9000              STR      r0,[sp,#0]
0002c8  9800              LDR      r0,[sp,#0]
0002ca  f4206080          BIC      r0,r0,#0x400
0002ce  f5006080          ADD      r0,r0,#0x400
0002d2  9000              STR      r0,[sp,#0]
0002d4  9800              LDR      r0,[sp,#0]
0002d6  60b0              STR      r0,[r6,#8]
0002d8  e06b              B        |L6.946|
                  |L6.730|
;;;549      }  
;;;550      else if (hcint.b.chhltd)
0002da  9803              LDR      r0,[sp,#0xc]
0002dc  f3c00040          UBFX     r0,r0,#1,#1
0002e0  2800              CMP      r0,#0
0002e2  d066              BEQ      |L6.946|
;;;551      {
;;;552        MASK_HOST_INT_CHH (num);
0002e4  f1050090          ADD      r0,r5,#0x90
0002e8  f8500024          LDR      r0,[r0,r4,LSL #2]
0002ec  68c0              LDR      r0,[r0,#0xc]
0002ee  9000              STR      r0,[sp,#0]
0002f0  9800              LDR      r0,[sp,#0]
0002f2  f0200002          BIC      r0,r0,#2
0002f6  9000              STR      r0,[sp,#0]
0002f8  f1050090          ADD      r0,r5,#0x90
0002fc  f8500024          LDR      r0,[r0,r4,LSL #2]
000300  9900              LDR      r1,[sp,#0]
000302  60c1              STR      r1,[r0,#0xc]
;;;553        
;;;554        if(pdev->host.HC_Status[num] == HC_XFRC)
000304  f6050074          ADD      r0,r5,#0x874
000308  5d00              LDRB     r0,[r0,r4]
00030a  2801              CMP      r0,#1
00030c  d115              BNE      |L6.826|
;;;555        {
;;;556          pdev->host.URB_State[num] = URB_DONE;  
00030e  2101              MOVS     r1,#1
000310  f6050083          ADD      r0,r5,#0x883
000314  5501              STRB     r1,[r0,r4]
;;;557          
;;;558          if (hcchar.b.eptype == EP_TYPE_BULK)
000316  9801              LDR      r0,[sp,#4]
000318  f3c04081          UBFX     r0,r0,#18,#2
00031c  2802              CMP      r0,#2
00031e  d13e              BNE      |L6.926|
;;;559          {
;;;560            pdev->host.hc[num].toggle_out ^= 1; 
000320  f6050094          ADD      r0,r5,#0x894
000324  eb001044          ADD      r0,r0,r4,LSL #5
000328  7e40              LDRB     r0,[r0,#0x19]
00032a  f0800101          EOR      r1,r0,#1
00032e  f6050094          ADD      r0,r5,#0x894
000332  eb001044          ADD      r0,r0,r4,LSL #5
000336  7641              STRB     r1,[r0,#0x19]
000338  e031              B        |L6.926|
                  |L6.826|
;;;561          }
;;;562        }
;;;563        else if(pdev->host.HC_Status[num] == HC_NAK)
00033a  f6050074          ADD      r0,r5,#0x874
00033e  5d00              LDRB     r0,[r0,r4]
000340  2803              CMP      r0,#3
000342  d104              BNE      |L6.846|
;;;564        {
;;;565          pdev->host.URB_State[num] = URB_NOTREADY;      
000344  2102              MOVS     r1,#2
000346  f6050083          ADD      r0,r5,#0x883
00034a  5501              STRB     r1,[r0,r4]
00034c  e027              B        |L6.926|
                  |L6.846|
;;;566        }    
;;;567        else if(pdev->host.HC_Status[num] == HC_NYET)
00034e  f6050074          ADD      r0,r5,#0x874
000352  5d00              LDRB     r0,[r0,r4]
000354  2804              CMP      r0,#4
000356  d10f              BNE      |L6.888|
;;;568        {
;;;569          if(pdev->host.hc[num].do_ping == 1)
000358  f6050094          ADD      r0,r5,#0x894
00035c  eb001044          ADD      r0,r0,r4,LSL #5
000360  7900              LDRB     r0,[r0,#4]
000362  2801              CMP      r0,#1
000364  d103              BNE      |L6.878|
;;;570          {
;;;571            USB_OTG_HC_DoPing(pdev, num);
000366  b2e1              UXTB     r1,r4
000368  4628              MOV      r0,r5
00036a  f7fffffe          BL       USB_OTG_HC_DoPing
                  |L6.878|
;;;572          }
;;;573          pdev->host.URB_State[num] = URB_NOTREADY;      
00036e  2102              MOVS     r1,#2
000370  f6050083          ADD      r0,r5,#0x883
000374  5501              STRB     r1,[r0,r4]
000376  e012              B        |L6.926|
                  |L6.888|
;;;574        }      
;;;575        else if(pdev->host.HC_Status[num] == HC_STALL)
000378  f6050074          ADD      r0,r5,#0x874
00037c  5d00              LDRB     r0,[r0,r4]
00037e  2805              CMP      r0,#5
000380  d104              BNE      |L6.908|
;;;576        {
;;;577          pdev->host.URB_State[num] = URB_STALL;      
000382  2104              MOVS     r1,#4
000384  f6050083          ADD      r0,r5,#0x883
000388  5501              STRB     r1,[r0,r4]
00038a  e008              B        |L6.926|
                  |L6.908|
;;;578        }  
;;;579        else if(pdev->host.HC_Status[num] == HC_XACTERR)
00038c  f6050074          ADD      r0,r5,#0x874
000390  5d00              LDRB     r0,[r0,r4]
000392  2806              CMP      r0,#6
000394  d103              BNE      |L6.926|
;;;580        {
;;;581          {
;;;582            pdev->host.URB_State[num] = URB_ERROR;  
000396  2103              MOVS     r1,#3
000398  f6050083          ADD      r0,r5,#0x883
00039c  5501              STRB     r1,[r0,r4]
                  |L6.926|
;;;583          }
;;;584        }
;;;585        CLEAR_HC_INT(hcreg , chhltd);    
00039e  2000              MOVS     r0,#0
0003a0  9000              STR      r0,[sp,#0]
0003a2  9800              LDR      r0,[sp,#0]
0003a4  f0200002          BIC      r0,r0,#2
0003a8  1c80              ADDS     r0,r0,#2
0003aa  9000              STR      r0,[sp,#0]
0003ac  9800              LDR      r0,[sp,#0]
0003ae  60b0              STR      r0,[r6,#8]
0003b0  bf00              NOP      
                  |L6.946|
;;;586      }
;;;587      
;;;588      
;;;589      return 1;
0003b2  2001              MOVS     r0,#1
;;;590    }
0003b4  b004              ADD      sp,sp,#0x10
0003b6  bd70              POP      {r4-r6,pc}
;;;591    #if defined ( __ICCARM__ ) /*!< IAR Compiler */
                          ENDP


                          AREA ||i.USB_OTG_USBH_handle_nptxfempty_ISR||, CODE, READONLY, ALIGN=1

                  USB_OTG_USBH_handle_nptxfempty_ISR PROC
;;;266    */
;;;267    static uint32_t USB_OTG_USBH_handle_nptxfempty_ISR (USB_OTG_CORE_HANDLE *pdev)
000000  b57f              PUSH     {r0-r6,lr}
;;;268    {
000002  4604              MOV      r4,r0
;;;269      USB_OTG_GINTMSK_TypeDef      intmsk;
;;;270      USB_OTG_HNPTXSTS_TypeDef     hnptxsts; 
;;;271      uint16_t                     len_words , len; 
;;;272      
;;;273      hnptxsts.d32 = USB_OTG_READ_REG32(&pdev->regs.GREGS->HNPTXSTS);
000004  68e0              LDR      r0,[r4,#0xc]
000006  6ac0              LDR      r0,[r0,#0x2c]
000008  9000              STR      r0,[sp,#0]
;;;274      
;;;275      len_words = (pdev->host.hc[hnptxsts.b.nptxqtop.chnum].xfer_len + 3) / 4;
00000a  9801              LDR      r0,[sp,#4]
00000c  f3c001c3          UBFX     r1,r0,#3,#4
000010  f6040094          ADD      r0,r4,#0x894
000014  eb001041          ADD      r0,r0,r1,LSL #5
000018  6900              LDR      r0,[r0,#0x10]
00001a  1cc0              ADDS     r0,r0,#3
00001c  f3c0068f          UBFX     r6,r0,#2,#16
;;;276      
;;;277      while ((hnptxsts.b.nptxfspcavail > len_words)&&
000020  e073              B        |L7.266|
                  |L7.34|
;;;278             (pdev->host.hc[hnptxsts.b.nptxqtop.chnum].xfer_len != 0))
;;;279      {
;;;280        
;;;281        len = hnptxsts.b.nptxfspcavail * 4;
000022  f64f71ff          MOV      r1,#0xffff
000026  9800              LDR      r0,[sp,#0]
000028  ea010580          AND      r5,r1,r0,LSL #2
;;;282        
;;;283        if (len > pdev->host.hc[hnptxsts.b.nptxqtop.chnum].xfer_len)
00002c  9801              LDR      r0,[sp,#4]
00002e  f3c001c3          UBFX     r1,r0,#3,#4
000032  f6040094          ADD      r0,r4,#0x894
000036  eb001041          ADD      r0,r0,r1,LSL #5
00003a  6900              LDR      r0,[r0,#0x10]
00003c  42a8              CMP      r0,r5
00003e  d215              BCS      |L7.108|
;;;284        {
;;;285          /* Last packet */
;;;286          len = pdev->host.hc[hnptxsts.b.nptxqtop.chnum].xfer_len;
000040  9801              LDR      r0,[sp,#4]
000042  f3c001c3          UBFX     r1,r0,#3,#4
000046  f6040094          ADD      r0,r4,#0x894
00004a  eb001041          ADD      r0,r0,r1,LSL #5
00004e  8a00              LDRH     r0,[r0,#0x10]
000050  b285              UXTH     r5,r0
;;;287          
;;;288          intmsk.d32 = 0;
000052  2000              MOVS     r0,#0
000054  9003              STR      r0,[sp,#0xc]
;;;289          intmsk.b.nptxfempty = 1;
000056  9803              LDR      r0,[sp,#0xc]
000058  f0200020          BIC      r0,r0,#0x20
00005c  3020              ADDS     r0,r0,#0x20
00005e  9003              STR      r0,[sp,#0xc]
;;;290          USB_OTG_MODIFY_REG32( &pdev->regs.GREGS->GINTMSK, intmsk.d32, 0);       
000060  68e0              LDR      r0,[r4,#0xc]
000062  6980              LDR      r0,[r0,#0x18]
000064  9903              LDR      r1,[sp,#0xc]
000066  4388              BICS     r0,r0,r1
000068  68e1              LDR      r1,[r4,#0xc]
00006a  6188              STR      r0,[r1,#0x18]
                  |L7.108|
;;;291        }
;;;292        
;;;293        len_words = (pdev->host.hc[hnptxsts.b.nptxqtop.chnum].xfer_len + 3) / 4;
00006c  9801              LDR      r0,[sp,#4]
00006e  f3c001c3          UBFX     r1,r0,#3,#4
000072  f6040094          ADD      r0,r4,#0x894
000076  eb001041          ADD      r0,r0,r1,LSL #5
00007a  6900              LDR      r0,[r0,#0x10]
00007c  1cc0              ADDS     r0,r0,#3
00007e  f3c0068f          UBFX     r6,r0,#2,#16
;;;294        
;;;295        USB_OTG_WritePacket (pdev , pdev->host.hc[hnptxsts.b.nptxqtop.chnum].xfer_buff, hnptxsts.b.nptxqtop.chnum, len);
000082  9801              LDR      r0,[sp,#4]
000084  f3c002c3          UBFX     r2,r0,#3,#4
000088  f3c003c3          UBFX     r3,r0,#3,#4
00008c  f6040094          ADD      r0,r4,#0x894
000090  eb001043          ADD      r0,r0,r3,LSL #5
000094  462b              MOV      r3,r5
000096  68c1              LDR      r1,[r0,#0xc]
000098  4620              MOV      r0,r4
00009a  f7fffffe          BL       USB_OTG_WritePacket
;;;296        
;;;297        pdev->host.hc[hnptxsts.b.nptxqtop.chnum].xfer_buff  += len;
00009e  9801              LDR      r0,[sp,#4]
0000a0  f3c001c3          UBFX     r1,r0,#3,#4
0000a4  f6040094          ADD      r0,r4,#0x894
0000a8  eb001041          ADD      r0,r0,r1,LSL #5
0000ac  68c0              LDR      r0,[r0,#0xc]
0000ae  1941              ADDS     r1,r0,r5
0000b0  9801              LDR      r0,[sp,#4]
0000b2  f3c002c3          UBFX     r2,r0,#3,#4
0000b6  f6040094          ADD      r0,r4,#0x894
0000ba  eb001042          ADD      r0,r0,r2,LSL #5
0000be  60c1              STR      r1,[r0,#0xc]
;;;298        pdev->host.hc[hnptxsts.b.nptxqtop.chnum].xfer_len   -= len;
0000c0  9801              LDR      r0,[sp,#4]
0000c2  f3c001c3          UBFX     r1,r0,#3,#4
0000c6  f6040094          ADD      r0,r4,#0x894
0000ca  eb001041          ADD      r0,r0,r1,LSL #5
0000ce  6900              LDR      r0,[r0,#0x10]
0000d0  1b41              SUBS     r1,r0,r5
0000d2  9801              LDR      r0,[sp,#4]
0000d4  f3c002c3          UBFX     r2,r0,#3,#4
0000d8  f6040094          ADD      r0,r4,#0x894
0000dc  eb001042          ADD      r0,r0,r2,LSL #5
0000e0  6101              STR      r1,[r0,#0x10]
;;;299        pdev->host.hc[hnptxsts.b.nptxqtop.chnum].xfer_count  += len; 
0000e2  9801              LDR      r0,[sp,#4]
0000e4  f3c001c3          UBFX     r1,r0,#3,#4
0000e8  f6040094          ADD      r0,r4,#0x894
0000ec  eb001041          ADD      r0,r0,r1,LSL #5
0000f0  6940              LDR      r0,[r0,#0x14]
0000f2  1941              ADDS     r1,r0,r5
0000f4  9801              LDR      r0,[sp,#4]
0000f6  f3c002c3          UBFX     r2,r0,#3,#4
0000fa  f6040094          ADD      r0,r4,#0x894
0000fe  eb001042          ADD      r0,r0,r2,LSL #5
000102  6141              STR      r1,[r0,#0x14]
;;;300        
;;;301        hnptxsts.d32 = USB_OTG_READ_REG32(&pdev->regs.GREGS->HNPTXSTS);
000104  68e0              LDR      r0,[r4,#0xc]
000106  6ac0              LDR      r0,[r0,#0x2c]
000108  9000              STR      r0,[sp,#0]
                  |L7.266|
00010a  9800              LDR      r0,[sp,#0]            ;277
00010c  b280              UXTH     r0,r0                 ;277
00010e  42b0              CMP      r0,r6                 ;277
000110  dd0a              BLE      |L7.296|
000112  9801              LDR      r0,[sp,#4]            ;278
000114  f3c001c3          UBFX     r1,r0,#3,#4           ;278
000118  f6040094          ADD      r0,r4,#0x894          ;278
00011c  eb001041          ADD      r0,r0,r1,LSL #5       ;278
000120  6900              LDR      r0,[r0,#0x10]         ;278
000122  2800              CMP      r0,#0                 ;278
000124  f47faf7d          BNE      |L7.34|
                  |L7.296|
;;;302      }  
;;;303      
;;;304      return 1;
000128  2001              MOVS     r0,#1
;;;305    }
00012a  b004              ADD      sp,sp,#0x10
00012c  bd70              POP      {r4-r6,pc}
;;;306    #if defined ( __ICCARM__ ) /*!< IAR Compiler */
                          ENDP


                          AREA ||i.USB_OTG_USBH_handle_port_ISR||, CODE, READONLY, ALIGN=2

                  USB_OTG_USBH_handle_port_ISR PROC
;;;362    #endif /* __CC_ARM */
;;;363    static uint32_t USB_OTG_USBH_handle_port_ISR (USB_OTG_CORE_HANDLE *pdev)
000000  b57f              PUSH     {r0-r6,lr}
;;;364    {
000002  4604              MOV      r4,r0
;;;365      USB_OTG_HPRT0_TypeDef  hprt0;
;;;366      USB_OTG_HPRT0_TypeDef  hprt0_dup;
;;;367      USB_OTG_HCFG_TypeDef   hcfg;    
;;;368      uint32_t retval = 0;
000004  2500              MOVS     r5,#0
;;;369      USB_OTG_GINTMSK_TypeDef  intmsk;
;;;370      
;;;371      intmsk.d32 = 0;
000006  2000              MOVS     r0,#0
000008  9000              STR      r0,[sp,#0]
;;;372      hcfg.d32 = 0;
00000a  9001              STR      r0,[sp,#4]
;;;373      hprt0.d32 = 0;
00000c  9003              STR      r0,[sp,#0xc]
;;;374      hprt0_dup.d32 = 0;
00000e  9002              STR      r0,[sp,#8]
;;;375      
;;;376      hprt0.d32 = USB_OTG_READ_REG32(pdev->regs.HPRT0);
000010  f8d400cc          LDR      r0,[r4,#0xcc]
000014  6800              LDR      r0,[r0,#0]
000016  9003              STR      r0,[sp,#0xc]
;;;377      hprt0_dup.d32 = USB_OTG_READ_REG32(pdev->regs.HPRT0);
000018  f8d400cc          LDR      r0,[r4,#0xcc]
00001c  6800              LDR      r0,[r0,#0]
00001e  9002              STR      r0,[sp,#8]
;;;378      
;;;379      /* Clear the interrupt bits in GINTSTS */
;;;380      
;;;381      hprt0_dup.b.prtena = 0;
000020  9802              LDR      r0,[sp,#8]
000022  f0200004          BIC      r0,r0,#4
000026  9002              STR      r0,[sp,#8]
;;;382      hprt0_dup.b.prtconndet = 0;
000028  9802              LDR      r0,[sp,#8]
00002a  f0200002          BIC      r0,r0,#2
00002e  9002              STR      r0,[sp,#8]
;;;383      hprt0_dup.b.prtenchng = 0;
000030  9802              LDR      r0,[sp,#8]
000032  f0200008          BIC      r0,r0,#8
000036  9002              STR      r0,[sp,#8]
;;;384      hprt0_dup.b.prtovrcurrchng = 0;
000038  9802              LDR      r0,[sp,#8]
00003a  f0200020          BIC      r0,r0,#0x20
00003e  9002              STR      r0,[sp,#8]
;;;385      
;;;386      /* Port Connect Detected */
;;;387      if (hprt0.b.prtconndet)
000040  9803              LDR      r0,[sp,#0xc]
000042  f3c00040          UBFX     r0,r0,#1,#1
000046  b158              CBZ      r0,|L8.96|
;;;388      {
;;;389        hprt0_dup.b.prtconndet = 1;
000048  9802              LDR      r0,[sp,#8]
00004a  f0200002          BIC      r0,r0,#2
00004e  1c80              ADDS     r0,r0,#2
000050  9002              STR      r0,[sp,#8]
;;;390        USBH_HCD_INT_fops->DevConnected(pdev);
000052  4839              LDR      r0,|L8.312|
000054  6800              LDR      r0,[r0,#0]  ; USBH_HCD_INT_fops
000056  6841              LDR      r1,[r0,#4]
000058  4620              MOV      r0,r4
00005a  4788              BLX      r1
;;;391        retval |= 1;   
00005c  f0450501          ORR      r5,r5,#1
                  |L8.96|
;;;392      }
;;;393      
;;;394      /* Port Enable Changed */
;;;395      if (hprt0.b.prtenchng)
000060  9803              LDR      r0,[sp,#0xc]
000062  f3c000c0          UBFX     r0,r0,#3,#1
000066  2800              CMP      r0,#0
000068  d053              BEQ      |L8.274|
;;;396      {
;;;397        hprt0_dup.b.prtenchng = 1;
00006a  9802              LDR      r0,[sp,#8]
00006c  f0200008          BIC      r0,r0,#8
000070  3008              ADDS     r0,r0,#8
000072  9002              STR      r0,[sp,#8]
;;;398        
;;;399        if (hprt0.b.prtena == 1)
000074  9803              LDR      r0,[sp,#0xc]
000076  f3c00080          UBFX     r0,r0,#2,#1
00007a  2800              CMP      r0,#0
00007c  d044              BEQ      |L8.264|
;;;400        {
;;;401          if ((hprt0.b.prtspd == HPRT0_PRTSPD_LOW_SPEED) ||
00007e  9803              LDR      r0,[sp,#0xc]
000080  f3c04041          UBFX     r0,r0,#17,#2
000084  2802              CMP      r0,#2
000086  d004              BEQ      |L8.146|
;;;402              (hprt0.b.prtspd == HPRT0_PRTSPD_FULL_SPEED))
000088  9803              LDR      r0,[sp,#0xc]
00008a  f3c04041          UBFX     r0,r0,#17,#2
00008e  2801              CMP      r0,#1
000090  d125              BNE      |L8.222|
                  |L8.146|
;;;403          { 
;;;404            hcfg.d32 = USB_OTG_READ_REG32(&pdev->regs.HREGS->HCFG);
000092  6960              LDR      r0,[r4,#0x14]
000094  6800              LDR      r0,[r0,#0]
000096  9001              STR      r0,[sp,#4]
;;;405            
;;;406            if (hprt0.b.prtspd == HPRT0_PRTSPD_LOW_SPEED)
000098  9803              LDR      r0,[sp,#0xc]
00009a  f3c04041          UBFX     r0,r0,#17,#2
00009e  2802              CMP      r0,#2
0000a0  d11d              BNE      |L8.222|
;;;407            {
;;;408              USB_OTG_WRITE_REG32(&pdev->regs.HREGS->HFIR, 6000 );
0000a2  f2417170          MOV      r1,#0x1770
0000a6  6960              LDR      r0,[r4,#0x14]
0000a8  6041              STR      r1,[r0,#4]
;;;409              if (hcfg.b.fslspclksel != HCFG_6_MHZ)
0000aa  9801              LDR      r0,[sp,#4]
0000ac  f0000003          AND      r0,r0,#3
0000b0  2802              CMP      r0,#2
0000b2  d014              BEQ      |L8.222|
;;;410              {
;;;411                if(pdev->cfg.phy_itface  == USB_OTG_EMBEDDED_PHY)
0000b4  7a20              LDRB     r0,[r4,#8]
0000b6  2802              CMP      r0,#2
0000b8  d104              BNE      |L8.196|
;;;412                {
;;;413                  USB_OTG_InitFSLSPClkSel(pdev , HCFG_6_MHZ);
0000ba  2102              MOVS     r1,#2
0000bc  4620              MOV      r0,r4
0000be  f7fffffe          BL       USB_OTG_InitFSLSPClkSel
0000c2  e00c              B        |L8.222|
                  |L8.196|
;;;414                }
;;;415                
;;;416                else
;;;417                {
;;;418                  USB_OTG_WRITE_REG32(&pdev->regs.HREGS->HFIR, 48000 );            
0000c4  f64b3180          MOV      r1,#0xbb80
0000c8  6960              LDR      r0,[r4,#0x14]
0000ca  6041              STR      r1,[r0,#4]
;;;419                  if (hcfg.b.fslspclksel != HCFG_48_MHZ)
0000cc  9801              LDR      r0,[sp,#4]
0000ce  f0000003          AND      r0,r0,#3
0000d2  2801              CMP      r0,#1
0000d4  d003              BEQ      |L8.222|
;;;420                  {
;;;421                    USB_OTG_InitFSLSPClkSel(pdev ,HCFG_48_MHZ );
0000d6  2101              MOVS     r1,#1
0000d8  4620              MOV      r0,r4
0000da  f7fffffe          BL       USB_OTG_InitFSLSPClkSel
                  |L8.222|
;;;422                  }
;;;423                } 
;;;424              }
;;;425            }
;;;426          }
;;;427          
;;;428          USBH_HCD_INT_fops->DevPortEnabled(pdev);  
0000de  4816              LDR      r0,|L8.312|
0000e0  6800              LDR      r0,[r0,#0]  ; USBH_HCD_INT_fops
0000e2  68c1              LDR      r1,[r0,#0xc]
0000e4  4620              MOV      r0,r4
0000e6  4788              BLX      r1
;;;429          
;;;430          /*unmask disconnect interrupt */
;;;431          intmsk.d32 = 0;
0000e8  2000              MOVS     r0,#0
0000ea  9000              STR      r0,[sp,#0]
;;;432          intmsk.b.disconnect = 1;  
0000ec  9800              LDR      r0,[sp,#0]
0000ee  f0205000          BIC      r0,r0,#0x20000000
0000f2  f1005000          ADD      r0,r0,#0x20000000
0000f6  9000              STR      r0,[sp,#0]
;;;433          USB_OTG_MODIFY_REG32(&pdev->regs.GREGS->GINTMSK, intmsk.d32, intmsk.d32);
0000f8  68e0              LDR      r0,[r4,#0xc]
0000fa  6980              LDR      r0,[r0,#0x18]
0000fc  9900              LDR      r1,[sp,#0]
0000fe  4388              BICS     r0,r0,r1
000100  4308              ORRS     r0,r0,r1
000102  68e1              LDR      r1,[r4,#0xc]
000104  6188              STR      r0,[r1,#0x18]
000106  e004              B        |L8.274|
                  |L8.264|
;;;434        }
;;;435        else
;;;436        {
;;;437          USBH_HCD_INT_fops->DevPortDisabled(pdev);
000108  480b              LDR      r0,|L8.312|
00010a  6800              LDR      r0,[r0,#0]  ; USBH_HCD_INT_fops
00010c  6901              LDR      r1,[r0,#0x10]
00010e  4620              MOV      r0,r4
000110  4788              BLX      r1
                  |L8.274|
;;;438          
;;;439        }
;;;440      }
;;;441      
;;;442      /* Overcurrent Change Interrupt */
;;;443      if (hprt0.b.prtovrcurrchng)
000112  9803              LDR      r0,[sp,#0xc]
000114  f3c01040          UBFX     r0,r0,#5,#1
000118  b130              CBZ      r0,|L8.296|
;;;444      {
;;;445        hprt0_dup.b.prtovrcurrchng = 1;
00011a  9802              LDR      r0,[sp,#8]
00011c  f0200020          BIC      r0,r0,#0x20
000120  3020              ADDS     r0,r0,#0x20
000122  9002              STR      r0,[sp,#8]
;;;446        retval |= 1;
000124  f0450501          ORR      r5,r5,#1
                  |L8.296|
;;;447      }
;;;448      
;;;449      /* Clear Port Interrupts */
;;;450      USB_OTG_WRITE_REG32(pdev->regs.HPRT0, hprt0_dup.d32);
000128  9902              LDR      r1,[sp,#8]
00012a  f8d400cc          LDR      r0,[r4,#0xcc]
00012e  6001              STR      r1,[r0,#0]
;;;451      
;;;452      return retval;
000130  4628              MOV      r0,r5
;;;453    }
000132  b004              ADD      sp,sp,#0x10
000134  bd70              POP      {r4-r6,pc}
;;;454    #if defined ( __ICCARM__ ) /*!< IAR Compiler */
                          ENDP

000136  0000              DCW      0x0000
                  |L8.312|
                          DCD      USBH_HCD_INT_fops

                          AREA ||i.USB_OTG_USBH_handle_ptxfempty_ISR||, CODE, READONLY, ALIGN=1

                  USB_OTG_USBH_handle_ptxfempty_ISR PROC
;;;314    */
;;;315    static uint32_t USB_OTG_USBH_handle_ptxfempty_ISR (USB_OTG_CORE_HANDLE *pdev)
000000  b5fe              PUSH     {r1-r7,lr}
;;;316    {
000002  4604              MOV      r4,r0
;;;317      USB_OTG_GINTMSK_TypeDef      intmsk;
;;;318      USB_OTG_HPTXSTS_TypeDef      hptxsts; 
;;;319      uint16_t                     len_words , len; 
;;;320      
;;;321      hptxsts.d32 = USB_OTG_READ_REG32(&pdev->regs.HREGS->HPTXSTS);
000004  6960              LDR      r0,[r4,#0x14]
000006  6900              LDR      r0,[r0,#0x10]
000008  9000              STR      r0,[sp,#0]
;;;322      
;;;323      len_words = (pdev->host.hc[hptxsts.b.ptxqtop.chnum].xfer_len + 3) / 4;
00000a  9801              LDR      r0,[sp,#4]
00000c  f3c001c3          UBFX     r1,r0,#3,#4
000010  f6040094          ADD      r0,r4,#0x894
000014  eb001041          ADD      r0,r0,r1,LSL #5
000018  6900              LDR      r0,[r0,#0x10]
00001a  1cc0              ADDS     r0,r0,#3
00001c  f3c0068f          UBFX     r6,r0,#2,#16
;;;324      
;;;325      while ((hptxsts.b.ptxfspcavail > len_words)&&
000020  e074              B        |L9.268|
                  |L9.34|
;;;326             (pdev->host.hc[hptxsts.b.ptxqtop.chnum].xfer_len != 0))    
;;;327      {
;;;328        
;;;329        len = hptxsts.b.ptxfspcavail * 4;
000022  f64f71ff          MOV      r1,#0xffff
000026  9800              LDR      r0,[sp,#0]
000028  ea010580          AND      r5,r1,r0,LSL #2
;;;330        
;;;331        if (len > pdev->host.hc[hptxsts.b.ptxqtop.chnum].xfer_len)
00002c  9801              LDR      r0,[sp,#4]
00002e  f3c001c3          UBFX     r1,r0,#3,#4
000032  f6040094          ADD      r0,r4,#0x894
000036  eb001041          ADD      r0,r0,r1,LSL #5
00003a  6900              LDR      r0,[r0,#0x10]
00003c  42a8              CMP      r0,r5
00003e  d216              BCS      |L9.110|
;;;332        {
;;;333          len = pdev->host.hc[hptxsts.b.ptxqtop.chnum].xfer_len;
000040  9801              LDR      r0,[sp,#4]
000042  f3c001c3          UBFX     r1,r0,#3,#4
000046  f6040094          ADD      r0,r4,#0x894
00004a  eb001041          ADD      r0,r0,r1,LSL #5
00004e  8a00              LDRH     r0,[r0,#0x10]
000050  b285              UXTH     r5,r0
;;;334          /* Last packet */
;;;335          intmsk.d32 = 0;
000052  2000              MOVS     r0,#0
000054  9002              STR      r0,[sp,#8]
;;;336          intmsk.b.ptxfempty = 1;
000056  9802              LDR      r0,[sp,#8]
000058  f0206080          BIC      r0,r0,#0x4000000
00005c  f1006080          ADD      r0,r0,#0x4000000
000060  9002              STR      r0,[sp,#8]
;;;337          USB_OTG_MODIFY_REG32( &pdev->regs.GREGS->GINTMSK, intmsk.d32, 0); 
000062  68e0              LDR      r0,[r4,#0xc]
000064  6980              LDR      r0,[r0,#0x18]
000066  9902              LDR      r1,[sp,#8]
000068  4388              BICS     r0,r0,r1
00006a  68e1              LDR      r1,[r4,#0xc]
00006c  6188              STR      r0,[r1,#0x18]
                  |L9.110|
;;;338        }
;;;339        
;;;340        len_words = (pdev->host.hc[hptxsts.b.ptxqtop.chnum].xfer_len + 3) / 4;
00006e  9801              LDR      r0,[sp,#4]
000070  f3c001c3          UBFX     r1,r0,#3,#4
000074  f6040094          ADD      r0,r4,#0x894
000078  eb001041          ADD      r0,r0,r1,LSL #5
00007c  6900              LDR      r0,[r0,#0x10]
00007e  1cc0              ADDS     r0,r0,#3
000080  f3c0068f          UBFX     r6,r0,#2,#16
;;;341        
;;;342        USB_OTG_WritePacket (pdev , pdev->host.hc[hptxsts.b.ptxqtop.chnum].xfer_buff, hptxsts.b.ptxqtop.chnum, len);
000084  9801              LDR      r0,[sp,#4]
000086  f3c002c3          UBFX     r2,r0,#3,#4
00008a  f3c003c3          UBFX     r3,r0,#3,#4
00008e  f6040094          ADD      r0,r4,#0x894
000092  eb001043          ADD      r0,r0,r3,LSL #5
000096  462b              MOV      r3,r5
000098  68c1              LDR      r1,[r0,#0xc]
00009a  4620              MOV      r0,r4
00009c  f7fffffe          BL       USB_OTG_WritePacket
;;;343        
;;;344        pdev->host.hc[hptxsts.b.ptxqtop.chnum].xfer_buff  += len;
0000a0  9801              LDR      r0,[sp,#4]
0000a2  f3c001c3          UBFX     r1,r0,#3,#4
0000a6  f6040094          ADD      r0,r4,#0x894
0000aa  eb001041          ADD      r0,r0,r1,LSL #5
0000ae  68c0              LDR      r0,[r0,#0xc]
0000b0  1941              ADDS     r1,r0,r5
0000b2  9801              LDR      r0,[sp,#4]
0000b4  f3c002c3          UBFX     r2,r0,#3,#4
0000b8  f6040094          ADD      r0,r4,#0x894
0000bc  eb001042          ADD      r0,r0,r2,LSL #5
0000c0  60c1              STR      r1,[r0,#0xc]
;;;345        pdev->host.hc[hptxsts.b.ptxqtop.chnum].xfer_len   -= len;
0000c2  9801              LDR      r0,[sp,#4]
0000c4  f3c001c3          UBFX     r1,r0,#3,#4
0000c8  f6040094          ADD      r0,r4,#0x894
0000cc  eb001041          ADD      r0,r0,r1,LSL #5
0000d0  6900              LDR      r0,[r0,#0x10]
0000d2  1b41              SUBS     r1,r0,r5
0000d4  9801              LDR      r0,[sp,#4]
0000d6  f3c002c3          UBFX     r2,r0,#3,#4
0000da  f6040094          ADD      r0,r4,#0x894
0000de  eb001042          ADD      r0,r0,r2,LSL #5
0000e2  6101              STR      r1,[r0,#0x10]
;;;346        pdev->host.hc[hptxsts.b.ptxqtop.chnum].xfer_count  += len; 
0000e4  9801              LDR      r0,[sp,#4]
0000e6  f3c001c3          UBFX     r1,r0,#3,#4
0000ea  f6040094          ADD      r0,r4,#0x894
0000ee  eb001041          ADD      r0,r0,r1,LSL #5
0000f2  6940              LDR      r0,[r0,#0x14]
0000f4  1941              ADDS     r1,r0,r5
0000f6  9801              LDR      r0,[sp,#4]
0000f8  f3c002c3          UBFX     r2,r0,#3,#4
0000fc  f6040094          ADD      r0,r4,#0x894
000100  eb001042          ADD      r0,r0,r2,LSL #5
000104  6141              STR      r1,[r0,#0x14]
;;;347        
;;;348        hptxsts.d32 = USB_OTG_READ_REG32(&pdev->regs.HREGS->HPTXSTS);
000106  6960              LDR      r0,[r4,#0x14]
000108  6900              LDR      r0,[r0,#0x10]
00010a  9000              STR      r0,[sp,#0]
                  |L9.268|
00010c  9800              LDR      r0,[sp,#0]            ;325
00010e  b280              UXTH     r0,r0                 ;325
000110  42b0              CMP      r0,r6                 ;325
000112  dd0a              BLE      |L9.298|
000114  9801              LDR      r0,[sp,#4]            ;326
000116  f3c001c3          UBFX     r1,r0,#3,#4           ;326
00011a  f6040094          ADD      r0,r4,#0x894          ;326
00011e  eb001041          ADD      r0,r0,r1,LSL #5       ;326
000122  6900              LDR      r0,[r0,#0x10]         ;326
000124  2800              CMP      r0,#0                 ;326
000126  f47faf7c          BNE      |L9.34|
                  |L9.298|
;;;349      }  
;;;350      
;;;351      return 1;
00012a  2001              MOVS     r0,#1
;;;352    }
00012c  bdfe              POP      {r1-r7,pc}
;;;353    
                          ENDP


                          AREA ||i.USB_OTG_USBH_handle_rx_qlvl_ISR||, CODE, READONLY, ALIGN=1

                  USB_OTG_USBH_handle_rx_qlvl_ISR PROC
;;;754    #endif /* __CC_ARM */
;;;755    static uint32_t USB_OTG_USBH_handle_rx_qlvl_ISR (USB_OTG_CORE_HANDLE *pdev)
000000  b530              PUSH     {r4,r5,lr}
;;;756    {
000002  b085              SUB      sp,sp,#0x14
000004  4604              MOV      r4,r0
;;;757      USB_OTG_GRXFSTS_TypeDef       grxsts;
;;;758      USB_OTG_GINTMSK_TypeDef       intmsk;
;;;759      USB_OTG_HCTSIZn_TypeDef       hctsiz; 
;;;760      USB_OTG_HCCHAR_TypeDef        hcchar;
;;;761      __IO uint8_t                  channelnum =0;  
000006  2000              MOVS     r0,#0
000008  9000              STR      r0,[sp,#0]
;;;762      uint32_t                      count;    
;;;763      
;;;764      /* Disable the Rx Status Queue Level interrupt */
;;;765      intmsk.d32 = 0;
00000a  9003              STR      r0,[sp,#0xc]
;;;766      intmsk.b.rxstsqlvl = 1;
00000c  9803              LDR      r0,[sp,#0xc]
00000e  f0200010          BIC      r0,r0,#0x10
000012  3010              ADDS     r0,r0,#0x10
000014  9003              STR      r0,[sp,#0xc]
;;;767      USB_OTG_MODIFY_REG32( &pdev->regs.GREGS->GINTMSK, intmsk.d32, 0);
000016  68e0              LDR      r0,[r4,#0xc]
000018  6980              LDR      r0,[r0,#0x18]
00001a  9903              LDR      r1,[sp,#0xc]
00001c  4388              BICS     r0,r0,r1
00001e  68e1              LDR      r1,[r4,#0xc]
000020  6188              STR      r0,[r1,#0x18]
;;;768      
;;;769      grxsts.d32 = USB_OTG_READ_REG32(&pdev->regs.GREGS->GRXSTSP);
000022  68e0              LDR      r0,[r4,#0xc]
000024  6a00              LDR      r0,[r0,#0x20]
000026  9004              STR      r0,[sp,#0x10]
;;;770      channelnum = grxsts.b.chnum;  
000028  9804              LDR      r0,[sp,#0x10]
00002a  f000000f          AND      r0,r0,#0xf
00002e  9000              STR      r0,[sp,#0]
;;;771      hcchar.d32 = USB_OTG_READ_REG32(&pdev->regs.HC_REGS[channelnum]->HCCHAR);
000030  f1040090          ADD      r0,r4,#0x90
000034  f89d1000          LDRB     r1,[sp,#0]
000038  f8500021          LDR      r0,[r0,r1,LSL #2]
00003c  6800              LDR      r0,[r0,#0]
00003e  9001              STR      r0,[sp,#4]
;;;772      
;;;773      switch (grxsts.b.pktsts)
000040  9804              LDR      r0,[sp,#0x10]
000042  f3c04043          UBFX     r0,r0,#17,#4
000046  2802              CMP      r0,#2
000048  d006              BEQ      |L10.88|
00004a  2803              CMP      r0,#3
00004c  d078              BEQ      |L10.320|
00004e  2805              CMP      r0,#5
000050  d077              BEQ      |L10.322|
000052  2807              CMP      r0,#7
000054  d173              BNE      |L10.318|
000056  e075              B        |L10.324|
                  |L10.88|
;;;774      {
;;;775      case GRXSTS_PKTSTS_IN:
;;;776        /* Read the data into the host buffer. */
;;;777        if ((grxsts.b.bcnt > 0) && (pdev->host.hc[channelnum].xfer_buff != (void  *)0))
000058  9804              LDR      r0,[sp,#0x10]
00005a  f3c0100a          UBFX     r0,r0,#4,#11
00005e  2800              CMP      r0,#0
000060  dd69              BLE      |L10.310|
000062  f6040094          ADD      r0,r4,#0x894
000066  f89d1000          LDRB     r1,[sp,#0]
00006a  eb001041          ADD      r0,r0,r1,LSL #5
00006e  68c0              LDR      r0,[r0,#0xc]
000070  2800              CMP      r0,#0
000072  d060              BEQ      |L10.310|
;;;778        {  
;;;779          
;;;780          USB_OTG_ReadPacket(pdev, pdev->host.hc[channelnum].xfer_buff, grxsts.b.bcnt);
000074  9804              LDR      r0,[sp,#0x10]
000076  f3c0120a          UBFX     r2,r0,#4,#11
00007a  f6040094          ADD      r0,r4,#0x894
00007e  f89d3000          LDRB     r3,[sp,#0]
000082  eb001043          ADD      r0,r0,r3,LSL #5
000086  68c1              LDR      r1,[r0,#0xc]
000088  4620              MOV      r0,r4
00008a  f7fffffe          BL       USB_OTG_ReadPacket
;;;781          /*manage multiple Xfer */
;;;782          pdev->host.hc[grxsts.b.chnum].xfer_buff += grxsts.b.bcnt;           
00008e  9804              LDR      r0,[sp,#0x10]
000090  f000010f          AND      r1,r0,#0xf
000094  f6040094          ADD      r0,r4,#0x894
000098  eb001041          ADD      r0,r0,r1,LSL #5
00009c  68c0              LDR      r0,[r0,#0xc]
00009e  9904              LDR      r1,[sp,#0x10]
0000a0  f3c1110a          UBFX     r1,r1,#4,#11
0000a4  4401              ADD      r1,r1,r0
0000a6  9804              LDR      r0,[sp,#0x10]
0000a8  f000020f          AND      r2,r0,#0xf
0000ac  f6040094          ADD      r0,r4,#0x894
0000b0  eb001042          ADD      r0,r0,r2,LSL #5
0000b4  60c1              STR      r1,[r0,#0xc]
;;;783          pdev->host.hc[grxsts.b.chnum].xfer_count  += grxsts.b.bcnt;
0000b6  9804              LDR      r0,[sp,#0x10]
0000b8  f000010f          AND      r1,r0,#0xf
0000bc  f6040094          ADD      r0,r4,#0x894
0000c0  eb001041          ADD      r0,r0,r1,LSL #5
0000c4  6940              LDR      r0,[r0,#0x14]
0000c6  9904              LDR      r1,[sp,#0x10]
0000c8  f3c1110a          UBFX     r1,r1,#4,#11
0000cc  4401              ADD      r1,r1,r0
0000ce  9804              LDR      r0,[sp,#0x10]
0000d0  f000020f          AND      r2,r0,#0xf
0000d4  f6040094          ADD      r0,r4,#0x894
0000d8  eb001042          ADD      r0,r0,r2,LSL #5
0000dc  6141              STR      r1,[r0,#0x14]
;;;784          
;;;785          
;;;786          count = pdev->host.hc[channelnum].xfer_count;
0000de  f6040094          ADD      r0,r4,#0x894
0000e2  f89d1000          LDRB     r1,[sp,#0]
0000e6  eb001041          ADD      r0,r0,r1,LSL #5
0000ea  6945              LDR      r5,[r0,#0x14]
;;;787          pdev->host.XferCnt[channelnum]  = count;
0000ec  f6040038          ADD      r0,r4,#0x838
0000f0  f89d1000          LDRB     r1,[sp,#0]
0000f4  f8405021          STR      r5,[r0,r1,LSL #2]
;;;788          
;;;789          hctsiz.d32 = USB_OTG_READ_REG32(&pdev->regs.HC_REGS[channelnum]->HCTSIZ);
0000f8  f1040090          ADD      r0,r4,#0x90
0000fc  f89d1000          LDRB     r1,[sp,#0]
000100  f8500021          LDR      r0,[r0,r1,LSL #2]
000104  6900              LDR      r0,[r0,#0x10]
000106  9002              STR      r0,[sp,#8]
;;;790          if(hctsiz.b.pktcnt > 0)
000108  9802              LDR      r0,[sp,#8]
00010a  f3c040c9          UBFX     r0,r0,#19,#10
00010e  2800              CMP      r0,#0
000110  dd11              BLE      |L10.310|
;;;791          {
;;;792            /* re-activate the channel when more packets are expected */
;;;793            hcchar.b.chen = 1;
000112  9801              LDR      r0,[sp,#4]
000114  f0204000          BIC      r0,r0,#0x80000000
000118  f1004000          ADD      r0,r0,#0x80000000
00011c  9001              STR      r0,[sp,#4]
;;;794            hcchar.b.chdis = 0;
00011e  9801              LDR      r0,[sp,#4]
000120  f0204080          BIC      r0,r0,#0x40000000
000124  9001              STR      r0,[sp,#4]
;;;795            USB_OTG_WRITE_REG32(&pdev->regs.HC_REGS[channelnum]->HCCHAR, hcchar.d32);
000126  f1040090          ADD      r0,r4,#0x90
00012a  f89d2000          LDRB     r2,[sp,#0]
00012e  9901              LDR      r1,[sp,#4]
000130  f8500022          LDR      r0,[r0,r2,LSL #2]
000134  6001              STR      r1,[r0,#0]
                  |L10.310|
;;;796          }
;;;797        }
;;;798        break;
000136  e006              B        |L10.326|
000138  e002              B        |L10.320|
00013a  e002              B        |L10.322|
00013c  e7ff              B        |L10.318|
                  |L10.318|
;;;799        
;;;800      case GRXSTS_PKTSTS_IN_XFER_COMP:
00013e  bf00              NOP      
                  |L10.320|
;;;801        
;;;802      case GRXSTS_PKTSTS_DATA_TOGGLE_ERR:
000140  bf00              NOP      
                  |L10.322|
;;;803      case GRXSTS_PKTSTS_CH_HALTED:
000142  bf00              NOP      
                  |L10.324|
;;;804      default:
;;;805        break;
000144  bf00              NOP      
                  |L10.326|
000146  bf00              NOP                            ;798
;;;806      }
;;;807      
;;;808      /* Enable the Rx Status Queue Level interrupt */
;;;809      intmsk.b.rxstsqlvl = 1;
000148  9803              LDR      r0,[sp,#0xc]
00014a  f0200010          BIC      r0,r0,#0x10
00014e  3010              ADDS     r0,r0,#0x10
000150  9003              STR      r0,[sp,#0xc]
;;;810      USB_OTG_MODIFY_REG32(&pdev->regs.GREGS->GINTMSK, 0, intmsk.d32);
000152  68e0              LDR      r0,[r4,#0xc]
000154  6980              LDR      r0,[r0,#0x18]
000156  9903              LDR      r1,[sp,#0xc]
000158  4308              ORRS     r0,r0,r1
00015a  68e1              LDR      r1,[r4,#0xc]
00015c  6188              STR      r0,[r1,#0x18]
;;;811      return 1;
00015e  2001              MOVS     r0,#1
;;;812    }
000160  b005              ADD      sp,sp,#0x14
000162  bd30              POP      {r4,r5,pc}
;;;813    
                          ENDP


                          AREA ||i.USB_OTG_USBH_handle_sof_ISR||, CODE, READONLY, ALIGN=2

                  USB_OTG_USBH_handle_sof_ISR PROC
;;;223    */
;;;224    static uint32_t USB_OTG_USBH_handle_sof_ISR (USB_OTG_CORE_HANDLE *pdev)
000000  b538              PUSH     {r3-r5,lr}
;;;225    {
000002  4604              MOV      r4,r0
;;;226      USB_OTG_GINTSTS_TypeDef      gintsts;
;;;227      gintsts.d32 = 0;
000004  2000              MOVS     r0,#0
000006  9000              STR      r0,[sp,#0]
;;;228      
;;;229      USBH_HCD_INT_fops->SOF(pdev);
000008  4807              LDR      r0,|L11.40|
00000a  6800              LDR      r0,[r0,#0]  ; USBH_HCD_INT_fops
00000c  6801              LDR      r1,[r0,#0]
00000e  4620              MOV      r0,r4
000010  4788              BLX      r1
;;;230      
;;;231      /* Clear interrupt */
;;;232      gintsts.b.sofintr = 1;
000012  9800              LDR      r0,[sp,#0]
000014  f0200008          BIC      r0,r0,#8
000018  3008              ADDS     r0,r0,#8
00001a  9000              STR      r0,[sp,#0]
;;;233      USB_OTG_WRITE_REG32(&pdev->regs.GREGS->GINTSTS, gintsts.d32);
00001c  9800              LDR      r0,[sp,#0]
00001e  68e1              LDR      r1,[r4,#0xc]
000020  6148              STR      r0,[r1,#0x14]
;;;234      
;;;235      return 1;
000022  2001              MOVS     r0,#1
;;;236    }
000024  bd38              POP      {r3-r5,pc}
;;;237    
                          ENDP

000026  0000              DCW      0x0000
                  |L11.40|
                          DCD      USBH_HCD_INT_fops

;*** Start embedded assembler ***

#line 1 "..\\Libraries\\STM32_USB_OTG_Driver\\src\\usb_hcd_int.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___13_usb_hcd_int_c_8ec64081____REV16|
#line 129 "D:\\Keil_v5\\ARM\\CMSIS\\Include\\core_cmInstr.h"
|__asm___13_usb_hcd_int_c_8ec64081____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___13_usb_hcd_int_c_8ec64081____REVSH|
#line 144
|__asm___13_usb_hcd_int_c_8ec64081____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
